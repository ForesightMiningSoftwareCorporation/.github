name: "Build and Push docker image to Azure ACR"
description: "Build and push a docker image to Azure ACR, with caching"

inputs:
  dockerfile:
    required: false
    description: "The path to the Dockerfile to use"
    default: Dockerfile
  image:
    required: true
    description: "Docker image name"
  registry:
    required: true
    description: "ACR Repository name"
  username:
    required: true
    description: "ACR Repository Username"
  password:
    required: true
    description: "ACR Repository Password"
  cargo_http_user_agent:
    required: true
    description: "Token to use for the private Docker Registry login"
runs:
  using: "composite"
  steps:
    # Login to registry (ACR)
    - name: Login to ACR
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - uses: SebRollen/toml-action@v1.0.0
      id: read_version
      with:
        file: 'crates/${{ inputs.bin }}/Cargo.toml'
        field: 'package.version'
    - name: Check Docker version exists
      id: check_version_exists
      uses: foresightminingsoftwarecorporation/docker-check-exists@v1
      with:
        repository: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
        image_name: ${{ inputs.image }}
        version: ${{ steps.read_version.outputs.value }}
    # Setup the runner to use Docker Buildkit
    - name: Set up Docker Buildx
      if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
      uses: docker/setup-buildx-action@v1
    # Build and Push Image with Cache
    - name: Prepare git and ssh config for build context
      if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
      shell: bash
      run: |
        mkdir root-config
        cp -r ~/.gitconfig  ~/.ssh root-config/
    - name: Build & Push
      uses: docker/build-push-action@v2
      if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
      with:
        context: .
        push: true
        file: ${{ inputs.dockerfile }}
        ssh: |
          default=${{ env.SSH_AUTH_SOCK }}
        secrets: |
          CARGO_HTTP_USER_AGENT=${{ inputs.cargo_http_user_agent }}
        tags: |
          ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.read_version.outputs.value }}
          ${{ inputs.registry }}/${{ inputs.image }}:latest