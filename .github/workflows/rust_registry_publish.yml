name: Publish Release to Private Registry

on:
  workflow_call:
    outputs:
      released:
        description: Was the crate released
        value: "true"
    inputs:
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.76"
        description: Rust toolchain to install
      ci_runner:
        type: string
        default: "rust-1-76-scale-set"
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      custom_cargo_commands:
        type: string
        default: ""
        description: Cusom cargo commands that will be run after login
      public_release:
        type: string
        default: "false"
        description: Is this a public release or not
    secrets:
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"
  DISCORD_WEBHOOK: "${{ secrets.DISCORD_WEBHOOK }}"

jobs:
  cargo_publish_registry:
    name: Release new version to private registry
    runs-on: ${{ inputs.ci_runner }}
    steps:
      - name: Set start time as env variable
        id: start_time
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: ""
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
      - name: Login to public Registry
        if: inputs.public_release == 'true'
        shell: bash
        run: |
          cargo login ${{ secrets.CARGO_PUBLIC_REGISTRY_TOKEN }}
      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1
        if: inputs.public_release != 'true'
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.FSE_SSH_PRIVATE_KEY }}
            ${{ secrets.VOLUMESIGHT_SSH_PRIVATE_KEY }}
      - name: Generate token
        if: inputs.public_release == 'true'
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_APPROVERS_APP_ID }}
          private_key: ${{ secrets.ACTIONS_APPROVERS_APP_PRIVATE_KEY }}
      - name: Tell people about the release
        if: env.DISCORD_WEBHOOK != '' && inputs.public_release == 'true'
        uses: Ilshidur/action-discord@master
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_name.outputs.value }} is waiting for approval to be published to the public registry crates.io"
      - name: Approve Release
        if: inputs.public_release == 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: "Publishers"
          minimum-approvals: 1
      - name: Additional Script
        if: inputs.additional_script != ''
        run: ${{ inputs.additional_script }}
        shell: bash
      - name: Update Packages
        if: inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}
      - name: Run custom cargo command
        if: inputs.custom_cargo_commands != ''
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: ${{ inputs.custom_cargo_commands }}
      - name: Publish to private registry
        if: inputs.public_release != 'true'
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: cargo publish --registry ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }} ${{ inputs.additional_args }}
      - name: Publish to public registry
        if: inputs.public_release == 'true'
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: cargo publish
      - name: Write outputs to file
        shell: bash
        if: always()
        working-directory: ${{ runner.temp }}
        run: |
          tee -a ${{ inputs.package }}-rust-registry-publish.json <<EOF
          {
            "name": "${{ inputs.package }}",
            "start_time": "${{ steps.start_time.outputs.value }}",
            "end_time": "$(date +'%s')000",
            "working_directory": "${{ inputs.working_directory }}",
            "type": "rust-registry-publish",
            "server_url": "${{ github.server_url }}",
            "repository": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "run_attempt": "${{ github.run_attempt }}",
            "actor": "${{ github.actor }}",
            "event_name": "${{ github.event_name }}",
            "outputs": {
              "released": {
                "value": true,
              }
            }
          }
          EOF
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fslabs__publishing__${{ github.run_id }}__${{ github.run_attempt }}__${{ inputs.package }}-rust-registry-publish
          path: ${{ runner.temp }}/${{ inputs.package }}-rust-registry-publish.json
