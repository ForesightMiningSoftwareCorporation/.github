on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Binary to build"
        default: "."
      dockerfile:
        type: string
        description: "The path to the Dockerfile to use"
        default: Dockerfile
      image:
        type: string
        required: true
        description: "Docker image name"
      registry:
        type: string
        required: true
        description: "Docker Repository name"
      private-registry-host:
        required: true
        type: string
      private-registry-name:
        required: true
        type: string
    secrets:
      github-token:
        required: true
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent
      private-registry-private-key:
        required: true
      private-registry-token:
        required: true
      username:
        required: true
        description: "Docker Repository Username"
      password:
        required: true
        description: "Docker Repository Password"

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_PRIVATE_KEYS: ${{ secrets.github-private-keys }}
    outputs:
      version: ${{ steps.read_version.outputs.value }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v3
      # Login to registry (ACR)
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      - uses: SebRollen/toml-action@v1.0.0
        id: read_version
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.version'
      - name: Check Docker version exists
        id: check_version_exists
        uses: foresightminingsoftwarecorporation/docker-check-exists@v1
        with:
          repository: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
          image_name: ${{ inputs.image }}
          version: ${{ steps.read_version.outputs.value }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.0.0
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        with:
          host: ${{ inputs.private-registry-host }}
          name: ${{ inputs.private-registry-name }}
          private_key: ${{ secrets.private-registry-private-key }}
          token: ${{ secrets.private-registry-token }}

      # Setup the runner to use Docker Buildkit
      - name: Set up Docker Buildx
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        uses: docker/setup-buildx-action@v1
      - name: Access private repos
        uses: webfactory/ssh-agent@v0.5.4
        if: ${{ env.GITHUB_PRIVATE_KEYS != '' && fromJSON(steps.check_version_exists.outputs.exists) == false  }}
        with:
          ssh-private-key: |
            ${{ env.GITHUB_PRIVATE_KEYS }}

      - name: Use ssh for github dep
        if: ${{ env.GITHUB_PRIVATE_KEYS != '' && fromJSON(steps.check_version_exists.outputs.exists) == false }}
        shell: bash
        run: |
          echo '[url "ssh://git@github.com/ForesightMiningSoftwareCorporation/"]' >> ~/.gitconfig
          echo "  insteadOf = https://github.com/ForesightMiningSoftwareCorporation/" >> ~/.gitconfig
          echo '[url "ssh://git@github.com/foresightminingsoftwarecorporation"]' >> ~/.gitconfig
          echo "  insteadOf = https://github.com/foresightminingsoftwarecorporation" >> ~/.gitconfig
      - name: Prepare git and ssh config for build context
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        shell: bash
        run: |
          mkdir root-config
          cp -r ~/.gitconfig  root-config/.gitconfig || :
          cp -r ~/.ssh root-config/.ssh || :
          cp -r ~/.cargo root-config/.cargo || :

      - name: Build & Push
        uses: docker/build-push-action@v2
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        with:
          context: ${{ inputs.working-directory }}
          push: true
          file: "${{ inputs.working-directory }}/${{ inputs.dockerfile }}"
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}
          tags: |
            ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.read_version.outputs.value }}
            ${{ inputs.registry }}/${{ inputs.image }}:latest