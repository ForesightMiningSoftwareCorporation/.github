on:
  workflow_call:
    outputs:
      released:
        description: Was the crate released
        value: ${{ jobs.create_release_npm.outputs.released }}
    inputs:
        working-directory:
          type: string
          default: ""
          description: Subdirectory to treat as repo root
        toolchain:
          type: string
          default: "1.73"
          description: Rust toolchain to install

jobs:
  check_release_npm:
    name: Check NPM Packages
    runs-on: "ubuntu-latest"
    outputs:
      name: ${{ steps.read_package_json.outputs.name }}
      current-version: ${{ steps.read_package_json.outputs.current-version }}
      exists: ${{ steps.check-version-exists.outputs.exists }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.working-directory }}/package.json
      - name: Get version in package.json
        id: read_package_json
        run: |
          echo "name=$(cat package.json | jq -r '.name' | rev | cut -d'/' -f 1 | rev)" >> $GITHUB_OUTPUT
          echo "current-version=$(cat package.json | jq -r '.version')" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.working-directory }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          check-latest: true
          registry-url: https://npm.pkg.github.com/
          scope: "@foresightminingsoftwarecorporation"

      - name: Check if package with same version exists
        id: check-version-exists
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GH_REGISTRY_PACKAGES }}
        run: |
          if npm view @foresightminingsoftwarecorporation/${{ steps.read_package_json.outputs.name }} --json > package_info.json ; then
            EXISTS=$(cat package_info.json | jq '.time | has("${{ steps.read_package_json.outputs.current-version }}")')
          else
            EXISTS="false"
          fi
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.working-directory }}

  build_artifacts_rust:
    name: Build napi artifacts
    needs:
      - check_release_npm
    if: ${{ needs.check_release_npm.outputs.exists == 'false' }}
    strategy:
      matrix:
        os:
          - name: ubuntu-latest-16-cores
            arch: x86_64-unknown-linux-gnu
            ext: ''
          - name: windows-latest-16-cores-custom
            arch: x86_64-pc-windows-msvc
            ext: .exe
          - name: macos-13-large
            arch: aarch64-apple-darwin
    runs-on: ${{ matrix.os.name }}

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}

      - name: Build rust package
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/build-napi-artifact@napi-rs
        with:
          runner_os: ${{ matrix.os.name }}
          runner_arch: ${{ matrix.os.arch }}
          runner_extension: ${{ matrix.os.ext }}
          docker: ghcr.io/foresightminingsoftwarecorporation/napi-rs-docker-builder:latest
          docker_build: yarn install && yarn build --target x86_64-unknown-linux-musl --js=false
          node_auth_token: ${{ secrets.GITHUB_TOKEN }}
          npm_token: ${{ secrets.GH_REGISTRY_PACKAGES }}
          shipyard: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          shipyard_token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          working-directory: ${{ inputs.working-directory }}
          bin: ${{ needs.check_release_npm.outputs.name }}
          version: ${{ needs.check_release_npm.outputs.current_version }}

  create_release_npm:
    name: Publish NPM Packages
    runs-on: "ubuntu-latest"
    outputs:
      released: ${{ steps.publish.outputs.released }}
    needs:
      - check_release_npm
      - build_artifacts_rust
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        if: ${{ needs.check_release_npm.outputs.exists == 'false' }}
        run: yarn install
        working-directory: ${{ inputs.working-directory }}

      - name: Download all artifacts
        if: ${{ needs.check_release_npm.outputs.exists == 'false' }}
        uses: actions/download-artifact@v4
        with:
          path: ${{ inputs.working-directory }}/raw_artifacts

      - name: Move Artifacts and rename
        if: ${{ needs.check_release_npm.outputs.exists == 'false' }}
        shell: bash
        run: |-
          mkdir -p artifacts
          for f in raw_artifacts/bindings-${{ needs.check_release_npm.outputs.name }}-*; do
              NEW_NAME="${f/-${{ needs.check_release_npm.outputs.name }}/}"
              mv -- "$f" "${NEW_NAME/raw_artifacts/artifacts}"
          done
        working-directory: ${{ inputs.working-directory }}

      - name: Move artifacts
        if: ${{ needs.check_release_npm.outputs.exists == 'false' }}
        run: yarn artifacts
        working-directory: ${{ inputs.working-directory }}

      - name: Publish
        id: publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GH_REGISTRY_PACKAGES }}
        if: ${{ false && needs.check_release_npm.outputs.exists == 'false' }}
        run: |
          released=npm publish && "true" || "false"
          if npm publish 2>&1 | ts "%Y-%m-%dT%H:%M:%.SZ; " | tee output.txt; then
            released=true
          else
            rc=false
          fi
          echo "released=$released" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.working-directory }}
