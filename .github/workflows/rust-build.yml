on:
  workflow_call:
    outputs:
      private_registry_released:
        description: Was it released to the private registry
        value: ${{ jobs.publish_private_registry.outputs.released }}
      public_registry_released:
        description: Was it released to the public registry
        value: ${{ jobs.publish_public_registry.outputs.released }}
      docker_released:
        description: Was it released to the docker registry
        value: ${{ jobs.publish_docker.outputs.released }}
      binary_released:
        description: Was it released as binary
        value: ${{ jobs.publish_binary.outputs.released }}
      npm_napi_released:
        description: Was it released as npm package
        value: ${{ jobs.publish_npm_napi.outputs.released }}
      installer_released:
        description: Was it released as an installer
        value: ${{ jobs.publish_installer.outputs.released }}
    inputs:
      skip_test:
        type: string
        default: "false"
        description: "Should the tests be run"
      skip_tests_no_changes:
        type: string
        default: "false"
        description: Skip tests when no changes were detected in any cargo workspace
      skip_miri_test:
        type: string
        default: "true"
        description: "Should miri tests be run"
      publish:
        type: string
        default: "false"
        description: "Should the crate be published"
      publish_private_registry:
        type: string
        default: "false"
        description: "Should the crate be published to the private registry"
      publish_public_registry:
        type: string
        default: "false"
        description: "Should the crate be published to the public registry"
      publish_docker:
        type: string
        default: "false"
        description: "Should the docker image be built and published"
      publish_binary:
        type: string
        default: "false"
        description: "Should the binary be built and published"
      publish_npm_napi:
        type: string
        default: "false"
        description: "Should the npm napi package be built and published"
      publish_installer:
        type: string
        default: "false"
        description: "Should the installer be built and published"
      toolchain:
        type: string
        default: "1.76"
        description: Rust toolchain to install.
          Do not set this to moving targets like "stable".
          Instead, leave it empty and regularly bump the default in this file.
      miri_toolchain:
        type: string
        default: "nightly-2023-08-02"
        description: Rust toolchain to use for Miri.
          Do not set this to moving targets like "nightly".
          Instead, leave it empty and regularly bump the default in this file.
      release_channel:
        type: string
        default: ""
        description: Hard coded release channel
      additional_cache_path:
        type: string
        default: ""
        description: Path of additional cache to get
      additional_cache_key:
        type: string
        default: ""
        description: Key of additional cache to get
      additional_cache_miss:
        type: string
        default: ""
        description: Script to run if additional cache miss
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      workspaces:
        type: string
        default: '[""]'
        description: JSON array of of Cargo workspaces
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      custom_cargo_commands:
        type: string
        default: ""
        description: Cusom cargo commands that will be run after login
      docker_context:
        type: string
        description: "Path to docker context"
        default: "default-docker-context-replace-me"
      dockerfile:
        type: string
        description: "The path to the Dockerfile to use"
        default: Dockerfile
      docker_image:
        type: string
        default: ""
        description: "Docker image name"
      docker_registry:
        type: string
        default: "oreprohub.azurecr.io"
        description: "Docker registry"
      post_build_additional_script:
        type: string
        default: ""
        description: Post Build Additional script to run after the additional packages
      force_nonrequired_publish_test:
        type: string
        default: "false"
        description: Force the publish test to be marked as non required
      binary_sign_build:
        type: string
        default: "false"
        description: Should the binary bin be signed
      application_name:
        type: string
        description: Name of the application
        default: ""
      report_release:
        type: string
        default: "true"
        description: Should the release be reported

jobs:
  publish_private_registry:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust_private_registry_publish.yml@v2
    if: inputs.publish_private_registry == 'true'
    with:
      toolchain: ${{ inputs.toolchain }}
      additional_script: ${{ inputs.additional_script }}
      required_packages: ${{ inputs.required_packages }}
      working_directory: ${{ inputs.working_directory }}
      additional_args: ${{ inputs.additional_args }}
      custom_cargo_commands: ${{ inputs.custom_cargo_commands }}
    secrets: inherit
  publish_public_registry:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust_public_registry_publish.yml@v2
    if: inputs.publish_public_registry == 'true'
    with:
      toolchain: ${{ inputs.toolchain }}
      additional_script: ${{ inputs.additional_script }}
      required_packages: ${{ inputs.required_packages }}
      working_directory: ${{ inputs.working_directory }}
      additional_args: ${{ inputs.additional_args }}
      custom_cargo_commands: ${{ inputs.custom_cargo_commands }}
    secrets: inherit
  publish_docker:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/docker_publish.yml@v2
    if: inputs.publish_docker == 'true'
    with:
      toolchain: ${{ inputs.toolchain }}
      working_directory: ${{ inputs.working_directory }}
      docker_context: ${{ inputs.docker_context }}
      dockerfile: ${{ inputs.dockerfile }}
      image: ${{ inputs.docker_image }}
      registry: ${{ inputs.docker_registry }}
    secrets: inherit
  publish_binary:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust_binary_publish.yml@v2-installer
    if: inputs.publish_binary == 'true'
    with:
      toolchain: ${{ inputs.toolchain }}
      release_channel: ${{ inputs.release_channel }}
      additional_script: ${{ inputs.additional_script }}
      required_packages: ${{ inputs.required_packages }}
      working_directory: ${{ inputs.working_directory }}
      additional_args: ${{ inputs.additional_args }}
      custom_cargo_commands: ${{ inputs.custom_cargo_commands }}
      post_build_additional_script: ${{ inputs.post_build_additional_script }}
      sign_build: ${{ inputs.binary_sign_build }}
      application_name: ${{ inputs.application_name }}
    secrets: inherit
  publish_installer:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust_installer_publish.yml@v2-installer
    if: inputs.publish_installer == 'true'
    with:
      sign_build: ${{ inputs.binary_sign_build }}
      application_name: ${{ inputs.application_name }}
      working_directory: ${{ inputs.working_directory }}
    secrets: inherit
  publish_npm_napi:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/npm-napi-release.yml@v2
    if: inputs.publish_npm_napi == 'true'
    with:
      working_directory: ${{ inputs.working_directory }}
      toolchain: ${{ inputs.toolchain }}
    secrets: inherit
  should_report_release:
    runs-on: ubuntu-latest
    if: always() && inputs.publish == 'true'
    outputs:
      report: ${{ steps.report.outputs.result }}
    needs:
      - publish_private_registry
      - publish_public_registry
      - publish_docker
      - publish_binary
      - publish_npm_napi
      - publish_installer
    steps:
      - uses: actions/github-script@v7
        name: Report status on PR
        id: report
        with:
          result-encoding: string
          script: |
            if (!${{ inputs.report_release }}) {
              return "false";
            }
            if (!${{ inputs.publish }}) {
              return "false";
            }
            if (${{ contains(needs.*.result, 'failure') }}) {
              return "false";
            }
            if (${{ contains(needs.*.result, 'cancelled') }}) {
              return "false";
            }
            const releases = [
              [${{ inputs.publish_private_registry }}, ${{ needs.publish_private_registry.outputs.released || 'false' }}],
              [${{ inputs.publish_public_registry }}, ${{ needs.publish_public_registry.outputs.released || 'false' }}],
              [${{ inputs.publish_docker }}, ${{ needs.publish_docker.outputs.released || 'false' }}],
              [${{ inputs.publish_binary }}, ${{ needs.publish_binary.outputs.released || 'false' }}],
              [${{ inputs.publish_npm_napi }}, ${{ needs.publish_npm_napi.outputs.released || 'false' }}],
            ];
            return releases.filter(release => release[0] && release[1]).length > 0 ? "true" : "false";

  report_release:
    needs:
      - publish_private_registry
      - publish_public_registry
      - publish_docker
      - publish_binary
      - publish_installer
      - publish_npm_napi
      - should_report_release
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/gh-release-when-published.yaml@v2-installer
    if: always() && needs.should_report_release.outputs.report == 'true'
    with:
      working-directory: ${{ inputs.working_directory }}
      private_registry_release: ${{ inputs.publish_private_registry == 'true' && needs.publish_private_registry.outputs.released == 'true' }}
      public_registry_release: ${{ inputs.publish_public_registry == 'true' && needs.publish_public_registry.outputs.released == 'true' }}
      docker_release: ${{ inputs.publish_docker == 'true' && needs.publish_docker.outputs.released == 'true' }}
      binary_release: ${{ inputs.publish_binary == 'true' && needs.publish_binary.outputs.released == 'true' }}
      npm_napi_release: ${{ inputs.publish_binary == 'true' && needs.publish_npm_napi.outputs.released == 'true' }}
    secrets: inherit
