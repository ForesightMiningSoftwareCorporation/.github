name: Build and publish Installer

on:
  workflow_call:
    outputs:
      released:
        description: Was the installer published
        value: "true"
    inputs:
      application_name:
        type: string
        description: Name of the application
      sign_build:
        type: string
        default: "false"
        description: Should the installer be signed
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command

jobs:
  gather_facts:
    runs-on: ubuntu-latest
    outputs:
      CHANNEL: ${{ steps.channel.outputs.release_channel }}
      LAUNCHER_APP_NAME: ${{ steps.channel.outputs.release_app_name }}
      APP_VERSION: ${{ steps.read_app_version.outputs.value }}
      APP_NAME: ${{ steps.path_name.outputs.app_name }}
      APP_BLOB_NAME: ${{ steps.path_name.outputs.application_blob_name }}
      LAUNCHER_VERSION: ${{ steps.read_launcher_version.outputs.value }}
      LAUNCHER_NAME: ${{ steps.path_name.outputs.launcher_name }}
      LAUNCHER_BLOB_NAME: ${{ steps.path_name.outputs.launcher_blob_name }}
      INSTALLER_NAME: ${{ steps.path_name.outputs.installer_name }}
      INSTALLER_SIGNED_NAME: ${{ steps.path_name.outputs.installer_signed_name }}
      INSTALLER_BLOB_NAME: ${{ steps.path_name.outputs.installer_blob_name }}
      INSTALLER_BLOB_DIR: ${{ steps.path_name.outputs.installer_blob_dir }}
      FALLBACK_BINARY: ${{ steps.path_name.outputs.fallback_binary }}
      PATH_NAME: ${{ steps.path_name.outputs.path_name }}
      EXPIRY: ${{ steps.path_name.outputs.expiry }}
      UPGRADE_CODE: ${{ steps.upgrade_code.outputs.value }}
      PACKAGE: ${{ steps.read_app_name.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: SebRollen/toml-action@v1.0.2
        name: Read App name
        id: read_app_name
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.name"
      - uses: SebRollen/toml-action@v1.0.2
        name: Read App Version
        id: read_app_version
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.version"
      - uses: SebRollen/toml-action@v1.0.2
        name: Read Launcher Version
        id: read_launcher_version
        with:
          file: "${{ inputs.working_directory }}/launcher/Cargo.toml"
          field: "package.version"
      - name: Derive Release Channel
        id: channel
        shell: bash
        run: |
          PACKAGE=${{ steps.channel.outputs.release_app_name }}
          RELEASE_APP_NAME="${{ inputs.application_name }} Nightly"
          if [[ $GITHUB_REF == refs/heads/main ]] ; then
            RELEASE_CHANNEL=nightly
            RELEASE_APP_NAME="${{ inputs.application_name }} Nightly"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE-alpha-$VERSION" ]] ; then
            RELEASE_CHANNEL=alpha
            RELEASE_APP_NAME="${{ inputs.application_name }} Alpha"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE-beta-$VERSION" ]] ; then
            RELEASE_CHANNEL=beta
            RELEASE_APP_NAME="${{ inputs.application_name }} Beta"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE-prod-$VERSION" ]] ; then
            RELEASE_CHANNEL=prod
            RELEASE_APP_NAME="${{ inputs.application_name }}"
          else
            echo "No matching release channel found for $GITHUB_REF, check that the version in Cargo.toml matches the tag."
            exit 1
          fi
          echo release_channel=${RELEASE_CHANNEL} >> $GITHUB_OUTPUT
          echo release_app_name=${RELEASE_APP_NAME} >> $GITHUB_OUTPUT
      - name: Derive path name
        id: path_name
        shell: bash
        env:
          DEFAULT_TOOLCHAIN: stable
          TARGET: x86_64-pc-windows-msvc
        run: |
          toolchain=$(yq -p toml '.toolchain.channel' < rust-toolchain.toml || echo '$DEFAULT_TOOLCHAIN')
          input_string="${{ steps.channel.outputs.release_app_name }}"
          input_version="${{ steps.read_app_version.outputs.value }}"
          path_name="${input_string// /_}"
          app_version="${input_version//./_}"
          fallback_binary="${path_name}_${app_version}"
          app_name="${{ steps.read_app_name.outputs.value }}-${{ env.TARGET }}-${toolchain}-v${{ steps.read_app_version.outputs.value }}-signed.exe"
          launcher_name="${{ steps.read_app_name.outputs.value }}_launcher-${{ env.TARGET }}-${toolchain}-v${{ steps.read_launcher_version.outputs.value }}-signed.exe"
          installer_name="${path_name}.${{ steps.read_launcher_version.outputs.value }}-${{ steps.read_app_version.outputs.value }}.msi"
          installer_signed_name="${path_name}.${{ steps.read_launcher_version.outputs.value }}-${{ steps.read_app_version.outputs.value }}-signed.msi"
          echo "path_name=$path_name" >> $GITHUB_OUTPUT
          echo "fallback_binary=$fallback_binary" >> $GITHUB_OUTPUT
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          echo "launcher_name=$launcher_name" >> $GITHUB_OUTPUT
          echo "installer_name=$installer_name" >> $GITHUB_OUTPUT
          echo "installer_signed_name=$installer_signed_name" >> $GITHUB_OUTPUT
          echo "application_blob_name=${{ steps.read_app_name.outputs.value }}/${{ steps.channel.outputs.release_channel }}/$app_name" >> $GITHUB_OUTPUT
          echo "launcher_blob_name=${{ steps.read_app_name.outputs.value }}_launcher/${{ steps.channel.outputs.release_channel }}/$launcher_name" >> $GITHUB_OUTPUT
          echo "installer_blob_name=${{ steps.read_app_name.outputs.value }}_installer/${{ steps.channel.outputs.release_channel }}/$installer_name" >> $GITHUB_OUTPUT
          echo "installer_blob_dir=${{ steps.read_app_name.outputs.value }}_installer/${{ steps.channel.outputs.release_channel }}" >> $GITHUB_OUTPUT
          echo "expiry=$(date -u -d "120 minutes" '+%Y-%m-%dT%H:%MZ')" >> $GITHUB_OUTPUT
      - uses: SebRollen/toml-action@v1.0.2
        name: Upgrade Code
        id: upgrade_code
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.metadata.fslabs.publish.binary.installer.${{ steps.channel.outputs.release_channel }}.upgrade_code"
  generate_wxs:
    runs-on: ubuntu-latest
    needs:
      - gather_facts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Replace FALLBACK_BINARY
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{FALLBACK_BINARY}}"
          replace: ${{ needs.gather_facts.outputs.FALLBACK_BINARY }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_PATH_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_PATH_NAME}}"
          replace: ${{ needs.gather_facts.outputs.PATH_NAME }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_CRATE_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_CRATE_NAME}}"
          replace: ${{ needs.gather_facts.outputs.PACKAGE }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_NAME}}"
          replace: ${{ needs.gather_facts.outputs.LAUNCHER_APP_NAME }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_VERSION
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_VERSION}}"
          replace: ${{ needs.gather_facts.outputs.APP_VERSION }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace UPGRADE_CODE
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{UPGRADE_CODE}}"
          replace: ${{ needs.gather_facts.outputs.UPGRADE_CODE }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.gather_facts.outputs.PATH_NAME }}-installer.wxs
          path: ${{ inputs.working_directory }}/installer/installer.wxs
  package_installer:
    runs-on: windows-latest
    needs:
      - gather_facts
      - generate_wxs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download WXS
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.gather_facts.outputs.PATH_NAME }}-installer.wxs
          path: ${{ inputs.working_directory }}/installer
      - name: Download Launcher and Application
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: |
          out=target/x86_64-pc-windows-msvc/release
          mkdir -p $out
          az storage blob download --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ needs.gather_facts.outputs.LAUNCHER_BLOB_NAME }} --file $out/${{ needs.gather_facts.outputs.PACKAGE }}_launcher.exe
          az storage blob download --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ needs.gather_facts.outputs.APP_BLOB_NAME }} --file $out/${{ needs.gather_facts.outputs.PACKAGE }}.exe
      - name: Install Wix Toolset
        working-directory: ${{ inputs.working_directory }}/installer
        shell: bash
        run: |
          unzip wix311-binaries.zip

      - name: Candle
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/candle installer.wxs

      - name: Light
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/light -sice:ICE91 -ext WixUIExtension -cultures:en-us installer.wixobj -out ${{ needs.gather_facts.outputs.INSTALLER_NAME }}

      - name: Move to own folder
        shell: pwsh
        run: |
          $Out = New-Item -Path "${{ runner.temp }}\bin_output\${{ needs.gather_facts.outputs.PACKAGE }}_installer\${{ needs.gather_facts.outputs.CHANNEL }}" -ItemType "directory"
          Copy-Item ${{ inputs.working_directory }}\installer\${{ needs.gather_facts.outputs.INSTALLER_NAME }} $Out\${{ needs.gather_facts.outputs.INSTALLER_NAME }}
          $hash = Get-FileHash "$Out\${{ needs.gather_facts.outputs.INSTALLER_NAME }}" -Algorithm SHA512
          echo $hash.Hash >> "$Out\${{ needs.gather_facts.outputs.INSTALLER_NAME }}-sha512.txt"

      - name: Upload unsigned installer to azure
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/bin_output
          delete_if_exists: true

      - name: Generate SAS Url for binary signing
        shell: bash
        id: sas-url
        run: |
          sas=$(az storage blob generate-sas --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ needs.gather_facts.outputs.INSTALLER_BLOB_NAME }} --permissions r --expiry ${{ needs.gather_facts.outputs.EXPIRY }} --https-only --full-uri --output tsv)
          echo "sas=$sas" >> $GITHUB_OUTPUT

      - name: Retrieve signing secret from Vault
        id: import-signing-secrets
        uses: hashicorp/vault-action@v2.7.3
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: github
          role: whirlpool-installer
          secrets: |
            kv-v2/data/whirlpool/signer PAT_TOKEN | WHIRLPOOL_SIGNER_PAT_TOKEN ;
            kv-v2/data/whirlpool/signer REPOSITORY | WHIRLPOOL_SIGNER_REPOSITORY ;

      - run: npm install adm-zip
      - name: Trigger signer workflow
        uses: actions/github-script@v7
        id: signer-workflow
        with:
          github-token: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_PAT_TOKEN }}
          script: |
            const AdmZip = require('adm-zip');
            const fs = require('fs');
            const MAX_RETRY=7;
            const RETRY_TIMEOUT_S = 5 ;
            const now = new Date();

            const wait = (ms) => new Promise((res) => setTimeout(res, ms));

            const callWithRetry = async (fn, max_retry = MAX_RETRY, retry_timeout = RETRY_TIMEOUT_S * 1000, depth = 0) => {
                try {
                    const out = await fn();
                    if (out === undefined || out === null || (Array.isArray(out) && out.length === 0)) {
                        await wait(retry_timeout);
                        return callWithRetry(fn, max_retry, retry_timeout, depth + 1);
                    }
                    return out;
                } catch(e) {
                    if (depth > max_retry) {
                        throw e;
                    }
                    await wait(retry_timeout);
                    return callWithRetry(fn, max_retry, retry_timeout, depth + 1);
                }
            }

            const getWorkflowId = async (workflow_name) => {
                const _fetchWorkflow = async () => {
                    const workflows = await github.rest.actions.listWorkflowRuns({
                        owner: gh_info[0],
                        repo: gh_info[1],
                        workflow_id: "sign_file.yaml",
                        created: `>${now.toISOString()}`,
                    });
                    return workflows.data.workflow_runs.find(w => w.name === workflow_name);
                };
                const workflow = await callWithRetry(_fetchWorkflow);
                return workflow && workflow.id;
            }

            const workflow_final_status = [
                "completed",
                "cancelled",
                "failure",
                "neutral",
                "skipped",
                "stale",
                "success",
                "timed_out",
            ]

            const waitForWorkflowRunCompletion = async (run_id) => {
                const _waitForWorkflowRunCompletion = async () => {
                  const workflow = await github.rest.actions.getWorkflowRun({
                      owner: gh_info[0],
                      repo: gh_info[1],
                      run_id,
                  });
                    if (workflow && workflow_final_status.includes(workflow.data.status)) {
                        return workflow.data;
                    }
                    return null;
                };
                return await callWithRetry(_waitForWorkflowRunCompletion, 60, 60);
            }

            const getWorkflowArtifact = async (run_id, artifact_name) => {
               const _getWorkflowArtifact = async () => {
                   const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                       owner: gh_info[0],
                       repo: gh_info[1],
                       run_id,
                   })
                   if (!artifacts) return null;
                   return artifacts.data.artifacts.find(a => a.name === artifact_name);
               }
               return await callWithRetry(_getWorkflowArtifact);
            }

            const downloadArtifact = async (artifact_id, download_path) => {
               const zip = await github.rest.actions.downloadArtifact({
                   owner: gh_info[0],
                   repo: gh_info[1],
                   artifact_id,
                   archive_format: "zip"
               });
               fs.mkdirSync(download_path, { recursive: true });
               const adm = new AdmZip(Buffer.from(zip.data));
               adm.extractAllTo(download_path, true);
            } 

            // Get data
            const gh_info = "${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_REPOSITORY }}".split("/");
            const artifact_sas = "${{ steps.sas-url.outputs.sas }}";
            const artifact_name = "${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}";
            const gh_artifact_name = "signed_artifacts";
            const temp_dir = String.raw`${{ runner.temp }}`;
            const dir_separator = temp_dir.indexOf("\\") == -1 ? "/" : "\\";
            const blob_dir = String.raw`${{ needs.gather_facts.outputs.INSTALLER_BLOB_DIR }}`.replace("/", "\\");
            const download_path = `${temp_dir}${dir_separator}signed_artifacts${dir_separator}${blob_dir}`;
            const repository = "${{ github.repository }}";
            const run_id = "${{ github.run_id }}";

            // 1. Dispatch the workflow
            await github.rest.actions.createWorkflowDispatch({
                owner: gh_info[0],
                repo: gh_info[1],
                workflow_id: "sign_file.yaml",
                ref: "main",
                inputs: {
                    artifact_sas: artifact_sas,
                    artifact_name: artifact_name,
                    source_repository: repository,
                    source_run_id: run_id
                }
            });
            // 2. Get the workflow id
            const workflow_id = await getWorkflowId(`Sign ${artifact_name} ${repository} ${run_id}`);
            // 3. Wait for the workflow_completion
            const completed_workflow = await waitForWorkflowRunCompletion(workflow_id);
            // 4. Load workflow artifact
            const artifact = await getWorkflowArtifact(workflow_id, gh_artifact_name);
            // 5. Download artifact
            await downloadArtifact(artifact.id, download_path);
            return {
                status: completed_workflow.status,
                conclusion: completed_workflow.conclusion,
                url: completed_workflow.url,
                id: completed_workflow.id,
            }
      - name: Generate signed artifacts checksum windows
        shell: pwsh
        run: |
          $hash = Get-FileHash "${{ runner.temp }}\signed_artifacts\${{ needs.gather_facts.outputs.INSTALLER_BLOB_DIR }}\${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}" -Algorithm SHA512
          echo $hash.Hash >> "${{ runner.temp }}\signed_artifacts\${{ needs.gather_facts.outputs.INSTALLER_BLOB_DIR }}\${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}-sha512.txt"

      - name: Upload signed artifacts to Azure Blob Upload
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/signed_artifacts
          delete_if_exists: true
