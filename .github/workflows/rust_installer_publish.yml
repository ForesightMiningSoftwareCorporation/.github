name: Build and publish Installer

on:
  workflow_call:
    outputs:
      released:
        description: Was the installer published
        value: "true"
    inputs:
      package:
        description: Name of the package
        type: string
      version:
        description: Version of the package
        type: string
      upgrade_code:
        description: Upgrade code
        type: string
      guid_prefix:
        description:  Guid Prefix
        type: string
      sas_expiry:
        description:  Sas Expiry
        type: string
      sub_apps_download_script:
        description:  Sub-apps download script
        type: string
      release_channel:
        description: Release channel of the package
        type: string
      aplication_name:
        description: Application name
        type: string
        default: ""
      application_fallback_name:
        description: Application fallback name
        type: string
        default: ""
      application_name:
        description: Name of the application
        type: string
      launcher_blob_dir:
        description: Name of the launcher blob to download
        type: string
      launcher_name:
        description: Name of the launcher blob to download
        type: string
      package_blob_dir:
        description: Name of the package blob to download
        type: string
      package_name:
        description: Name of the package blob to download
        type: string
      installer_blob_name:
        description: Name of the installer blob to upload
        type: string
      sign_build:
        type: string
        default: "true"
        description: Should the installer be signed
      working_directory:
        description: Working directory to run the cargo command
        type: string
        default: "."
      release_channel:
        description: Working directory to run the cargo command
        type: string
        default: "."

permissions:
  id-token: write
  contents: read

jobs:
  build_and_sign_installer:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Replace FALLBACK_BINARY
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{FALLBACK_BINARY}}"
          replace: ${{ inputs.application_fallback_name }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_PATH_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_PATH_NAME}}"
          replace: ${{ inputs.application_fallback_name }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_CRATE_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_CRATE_NAME}}"
          replace: ${{ inputs.package }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_NAME
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_NAME}}"
          replace: ${{ inputs.application_name }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace APP_VERSION
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{APP_VERSION}}"
          replace: ${{ inputs.version }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace UPGRADE_CODE
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{UPGRADE_CODE}}"
          replace: ${{ inputs.upgrade_code }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Replace GUID_PREFIX
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{GUID_PREFIX}}"
          replace: ${{ inputs.guid_prefix }}
          include: "${{ inputs.working_directory }}/installer/installer.wxs"
      - name: Download Launcher, Application and SubApps
        shell: bash
        working-directory: ${{ inputs.working_directory }}/
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
        run: |
          out=target/x86_64-pc-windows-msvc/release
          mkdir -p $out
          az storage blob download --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.launcher_blob_dir }}/${{ inputs.launcher_name }}  --file $out/${{ inputs.package }}_launcher.exe
          az storage blob download --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.package_blob_dir }}/${{ inputs.package_name }}  --file $out/${{ inputs.package }}.exe
          ${{ inputs.sub_apps_download_script }}

      - name: Install Wix Toolset
        working-directory: ${{ inputs.working_directory }}/installer
        shell: bash
        run: |
          unzip wix311-binaries.zip

      - name: Candle
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/candle installer.wxs

      - name: Light
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/light -sice:ICE91 -ext WixUIExtension -cultures:en-us installer.wixobj -out ${{ inputs.installer_name }}

      - name: Move to own folder
        shell: pwsh
        run: |
          $Out = New-Item -Path "${{ runner.temp }}\bin_output\${{ inputs.package }}_installer\${{ fromJson(inputs.package_detail).publish.release_channel }}" -ItemType "directory"
          Copy-Item ${{ inputs.working_directory }}\installer\${{ inputs.installer_name }} $Out\${{ inputs.installer_name }}
          $hash = Get-FileHash "$Out\${{ inputs.installer_name }}" -Algorithm SHA512
          echo $hash.Hash >> "$Out\${{ inputs.installer_name }}-sha512.txt"

      - name: Upload unsigned installer to azure
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/bin_output
          delete_if_exists: true

      - name: Generate SAS Url for binary signing
        shell: bash
        id: sas-url
        run: |
          sas=$(az storage blob generate-sas --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.installer_blob_dir }}/${{ inputs.installer_name }}  --permissions r --expiry ${{ inputs.sas_expiry }} --https-only --full-uri --output tsv)
          echo "sas=$sas" >> $GITHUB_OUTPUT

      - name: Retrieve signing secret from Vault
        id: import-signing-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: github
          role: whirlpool-installer
          secrets: |
            kv-v2/data/whirlpool/signer PAT_TOKEN | WHIRLPOOL_SIGNER_PAT_TOKEN ;
            kv-v2/data/whirlpool/signer REPOSITORY | WHIRLPOOL_SIGNER_REPOSITORY ;

      - run: npm install adm-zip
      - name: Trigger signer workflow
        uses: ForesightMiningSoftwareCorporation/action-trigger-signer-workflow@main
        id: signer-workflow
        if: inputs.sign_build == 'true'
        with:
          token: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_PAT_TOKEN }}
          signer_repository: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_REPOSITORY }}
          sas_url: ${{ steps.sas-url.outputs.sas }}
          artifact_to_sign: ${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}
          blob_dir: ${{ inputs.installer_blob_dir }}

      - name: Generate signed artifacts checksum windows
        shell: pwsh
        run: |
          $hash = Get-FileHash "${{ runner.temp }}\signed_artifacts\${{ inputs.installer_blob_dir }}\${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}" -Algorithm SHA512
          echo $hash.Hash >> "${{ runner.temp }}\signed_artifacts\${{ inputs.installer_blob_dir }}\${{ needs.gather_facts.outputs.INSTALLER_SIGNED_NAME }}-sha512.txt"

      - name: Upload signed artifacts to Azure Blob Upload
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/signed_artifacts
          delete_if_exists: true

      - name: Upload signed bin to github artifacts
        if: inputs.sign_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-installer-signed
          path: ${{ runner.temp }}/signed_artifacts
          overwrite: true
