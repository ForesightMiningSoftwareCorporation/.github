name: Build and publish Installer

on:
  workflow_call:
    outputs:
      released:
        description: Was the installer published
        value: "true"
    inputs:
      package:
        description: Name of the package
        type: string
      version:
        description: Version of the package
        type: string
      upgrade_code:
        description: Upgrade code
        type: string
      guid_prefix:
        description: Guid Prefix
        type: string
      sas_expiry:
        description: Sas Expiry
        type: string
      sub_apps_download_script:
        description: Sub-apps download script
        type: string
      release_channel:
        description: Release channel of the package
        type: string
      application_name:
        description: Application name
        type: string
        default: ""
      application_fallback_name:
        description: Application fallback name
        type: string
        default: ""
      launcher_blob_dir:
        description: Name of the launcher blob to download
        type: string
      launcher_name:
        description: Name of the launcher blob to download
        type: string
      package_blob_dir:
        description: Name of the package blob to download
        type: string
      package_name:
        description: Name of the package blob to download
        type: string
      installer_blob_dir:
        description: Name of the installer blob to upload
        type: string
      installer_name:
        description: Name of the installer blob to upload
        type: string
      installer_signed_name:
        description: Name of the installer blob to upload
        type: string
      sign_build:
        type: string
        default: "true"
        description: Should the installer be signed
      working_directory:
        description: Working directory to run the cargo command
        type: string
        default: "."
      toolchain:
        description: Toolchain
        type: string
        default: "."

permissions:
  id-token: write
  contents: read

jobs:
  build_and_sign_installer:
    runs-on: windows-latest
    steps:
      - name: Set start time as env variable
        id: start_time
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4
      - name: Replace in installer.wxs
        shell: pwsh
        run: |
          $filePath = '${{ inputs.working_directory }}/installer/installer.wxs'
          (Get-Content $filePath) -replace '{{FALLBACK_BINARY}}', '${{ inputs.application_fallback_name }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{APP_PATH_NAME}}', '${{ inputs.application_fallback_name }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{APP_CRATE_NAME}}', '${{ inputs.package }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{APP_NAME}}', '${{ inputs.application_name }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{APP_VERSION}}', '${{ inputs.version }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{UPGRADE_CODE}}', '${{ inputs.upgrade_code }}' | Set-Content $filePath
          (Get-Content $filePath) -replace '{{GUID_PREFIX}}', '${{ inputs.guid_prefix }}' | Set-Content $filePath
      - name: Download Launcher, Application and SubApps
        shell: bash
        working-directory: ${{ inputs.working_directory }}/
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
        run: |
          out=target/x86_64-pc-windows-msvc/release
          mkdir -p $out
          az storage blob download --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.launcher_blob_dir }}/${{ inputs.launcher_name }}  --file $out/${{ inputs.package }}_launcher.exe
          az storage blob download --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.package_blob_dir }}/${{ inputs.package_name }}  --file $out/${{ inputs.package }}.exe
          ${{ inputs.sub_apps_download_script }}

      - name: Install Wix Toolset
        working-directory: ${{ inputs.working_directory }}/installer
        shell: bash
        run: |
          unzip wix311-binaries.zip

      - name: Candle
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/candle installer.wxs

      - name: Light
        shell: bash
        working-directory: ${{ inputs.working_directory }}/installer
        run: |
          ./wix311-binaries/light -sice:ICE91 -ext WixUIExtension -cultures:en-us installer.wixobj -out ${{ inputs.installer_name }}

      - name: Move to own folder
        shell: pwsh
        run: |
          $Out = New-Item -Path "${{ runner.temp }}\bin_output\${{ inputs.package }}_installer\${{ inputs.release_channel }}" -ItemType "directory"
          Copy-Item ${{ inputs.working_directory }}\installer\${{ inputs.installer_name }} $Out\${{ inputs.installer_name }}
          $hash = Get-FileHash "$Out\${{ inputs.installer_name }}" -Algorithm SHA512
          echo $hash.Hash >> "$Out\${{ inputs.installer_name }}-sha512.txt"

      - name: Upload unsigned installer to azure
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/bin_output
          delete_if_exists: true

      - name: Generate SAS Url for binary signing
        shell: bash
        id: sas-url
        run: |
          sas=$(az storage blob generate-sas --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ inputs.installer_blob_dir }}/${{ inputs.installer_name }}  --permissions r --expiry ${{ inputs.sas_expiry }} --https-only --full-uri --output tsv)
          echo "sas=$sas" >> $GITHUB_OUTPUT

      - name: Retrieve signing secret from Vault
        id: import-signing-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: github
          role: whirlpool-installer
          secrets: |
            kv-v2/data/whirlpool/signer APP_ID | WHIRLPOOL_SIGNER_APP_ID ;
            kv-v2/data/whirlpool/signer APP_PRIVATE_KEY | WHIRLPOOL_SIGNER_APP_PRIVATE_KEY ;
            kv-v2/data/whirlpool/signer APP_INSTALLATION_ID | WHIRLPOOL_SIGNER_APP_INSTALLATION_ID ;
            kv-v2/data/whirlpool/signer REPOSITORY | WHIRLPOOL_SIGNER_REPOSITORY ;

      - id: generate_token
        name: Generate token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_APP_ID }}
          private_key: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_APP_PRIVATE_KEY }}
          installation_retrieval_mode: id
          installation_retrieval_payload: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_APP_INSTALLATION_ID }}

      - name: Trigger signer workflow
        uses: ForesightMiningSoftwareCorporation/action-trigger-signer-workflow@main
        id: signer-workflow
        if: inputs.sign_build == 'true'
        with:
          token: ${{ steps.generate_token.outputs.token }}
          signer_repository: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_REPOSITORY }}
          sas_url: ${{ steps.sas-url.outputs.sas }}
          artifact_to_sign: ${{ inputs.installer_signed_name }}
          blob_dir: ${{ inputs.installer_blob_dir }}

      - name: Generate signed artifacts checksum windows
        shell: pwsh
        run: |
          $hash = Get-FileHash "${{ runner.temp }}\signed_artifacts\${{ inputs.installer_blob_dir }}\${{ inputs.installer_signed_name }}" -Algorithm SHA512
          echo $hash.Hash >> "${{ runner.temp }}\signed_artifacts\${{ inputs.installer_blob_dir }}\${{ inputs.installer_signed_name }}-sha512.txt"

      - name: Upload signed artifacts to Azure Blob Upload
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2.2.1
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/signed_artifacts
          delete_if_exists: true

      - name: Upload signed bin to github artifacts
        if: inputs.sign_build == 'true'
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: release-installer-signed
          path: ${{ runner.temp }}/signed_artifacts
          overwrite: true
      - name: Write outputs to file
        shell: bash
        if: always()
        working-directory: ${{ runner.temp }}
        run: |
          tee -a ${{ inputs.package }}-rust-installer-publish.json <<EOF
          {
            "name": "${{ inputs.package }}",
            "start_time": "${{ steps.start_time.outputs.value }}",
            "end_time": "$(date +'%s')000",
            "working_directory": "${{ inputs.working_directory }}",
            "type": "rust-installer-publish",
            "server_url": "${{ github.server_url }}",
            "repository": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "run_attempt": "${{ github.run_attempt }}",
            "actor": "${{ github.actor }}",
            "event_name": "${{ github.event_name }}",
            "outputs": {
              "released": ${{ steps.upload.outcome == 'success' && true || false }},
              "version": "${{ inputs.version }}"
            }
          }
          EOF
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fslabs__publishing__${{ github.run_id }}__${{ github.run_attempt }}__${{ inputs.package }}-rust-installer-publish
          path: ${{ runner.temp }}/${{ inputs.package }}-rust-installer-publish.json
