name: Publish Release to Private Registry

on:
  workflow_call:
    outputs:
      released:
        description: Was the crate released
        value: "true"
    inputs:
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.73"
        description: Rust toolchain to install
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      custom_cargo_commands:
        type: string
        default: ""
        description: Cusom cargo commands that will be run after login
      package_detail:
        type: string
        default: "{}"
        description: "Json encoded string of the package detail as computed by fslabscli"

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true

permissions:
  issues: write
  contents: read

jobs:
  derive_runner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: "rust-toolchain.toml"
      - name: Get rust channel
        id: rust-channel
        shell: bash
        run: |
          rust_version="$(yq -p toml '.toolchain.channel' < rust-toolchain.toml || echo '${{ inputs.toolchain }}')"
          rust_version="${rust_version/./-}"
          echo "rust_version=${rust_version}" >> $GITHUB_OUTPUT
    outputs:
      rust-channel: ${{ steps.rust-channel.outputs.rust_version }}
  cargo_publish_public_registry:
    needs:
      - derive_runner
    name: Release new version to public registry
    runs-on: "rust-${{ needs.derive_runner.outputs.rust-channel }}-scale-set"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: SebRollen/toml-action@v1.0.2
        id: read_version
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.version"
      - uses: SebRollen/toml-action@v1.0.2
        id: read_name
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.name"
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: ""
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
      - name: Login to public Registry
        shell: bash
        run: |
          cargo login ${{ secrets.CARGO_PUBLIC_REGISTRY_TOKEN }}
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_APPROVERS_APP_ID }}
          private_key: ${{ secrets.ACTIONS_APPROVERS_APP_PRIVATE_KEY }}
      - name: Tell people about the release
        if: env.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_name.outputs.value }} is waiting for approval to be published to the public registry crates.io"
      - name: Approve Release
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: "Publishers"
          minimum-approvals: 1
      - name: Additional Script
        if: inputs.additional_script != ''
        run: ${{ inputs.additional_script }}
        shell: bash
      - name: Update Packages
        if: inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}
      - name: Run custom cargo command
        if: inputs.custom_cargo_commands != ''
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: ${{ inputs.custom_cargo_commands }}
      - name: Publish to public registry
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: cargo publish
