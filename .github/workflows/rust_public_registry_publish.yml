name: Publish Release to Private Registry

on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: "ubuntu-latest"
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      initial_event_name:
        type: string
        default: "push"
        description: Event that triggered the workflow
      skip-test:
        type: boolean
        default: false
        description: Skip the test step
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      custom_cargo_commands:
        type: string
        default: ""
        description: Cusom cargo commands that will be run after login

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  DISCORD_WEBHOOK: "${{ secrets.DISCORD_WEBHOOK }}"

permissions:
  issues: write
  contents: read

jobs:
  cargo_publish_public_registry:
    name: Release new version to public registry
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: SebRollen/toml-action@v1.0.2
        id: read_version
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.version'

      - uses: SebRollen/toml-action@v1.0.2
        id: read_name
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.name'

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/cargo-public-crate-exists@v1.1.0
        name: Check if the package exists
        id: check_exists
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Cache Dependencies
        if: steps.check_exists.outputs.exists == 'false'
        uses: Swatinem/rust-cache@v2

      - uses: dtolnay/rust-toolchain@master
        if: steps.check_exists.outputs.exists == 'false'
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: Login to public Registry
        shell: bash
        if: steps.check_exists.outputs.exists == 'false' && inputs.login_private_registry == 'true'
        run: |
          cargo login ${{ secrets.CARGO_PUBLIC_REGISTRY_TOKEN }}

      - name: Generate token
        id: generate_token
        if: steps.check_exists.outputs.exists == 'false' && inputs.login_private_registry == 'true'
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_APPROVERS_APP_ID }}
          private_key: ${{ secrets.ACTIONS_APPROVERS_APP_PRIVATE_KEY }}

      - name: Tell people about the release
        if: steps.check_exists.outputs.exists != 'true' && env.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_name.outputs.value }} is waiting for approval to be published to the public registry crates.io"

      - name: Approve Release
        uses: trstringer/manual-approval@v1
        if: steps.check_exists.outputs.exists == 'false' && inputs.login_private_registry == 'true'
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: "Publishers"
          minimum-approvals: 1

      - name: Additional Script
        if: steps.check_exists.outputs.exists != 'true' && inputs.additional_script != ''
        run: ${{ inputs.additional_script }}
        shell: bash

      - name: Update Packages
        if: steps.check_exists.outputs.exists != 'true' && inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Run custom cargo command
        if: steps.check_exists.outputs.exists != 'true' && inputs.custom_cargo_commands != ''
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.custom_cargo_commands }}

      - name: Publish to public registry
        if: steps.check_exists.outputs.exists == 'false'
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: cargo publish

      - name: Send Discord Notification
        if: steps.check_exists.outputs.exists == 'false'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: '[{"title": "Documentation", "url": "https://shipyard.rs/${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}/${{ steps.read_package_name.outputs.value }}/${{ steps.read_version.outputs.value }}/docs/${{ steps.read_package_name.outputs.value }}/index.html"}]'
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_package_name.outputs.value }} has been published to the private registry"

      - name: Send Discord Notification
        if: steps.check_exists.outputs.exists != 'true' && env.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: '[{"title": "Crates.oi", "url": "https://crates.io/crates/${{ steps.read_name.outputs.value }}/${{ steps.read_version.outputs.value }}"}]'
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_name.outputs.value }} has been published to the public registry"
