on:
  workflow_call:
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      fail-fast:
        type: string
        default: "true"
        description: Should all the test ran or fail early
      skip-cargo-test:
        type: string
        default: "false"
        description: Should we skip cargo test (useful in there are no tests define)
      login_private_registry:
        type: string
        default: "true"
        description: Should we login to the private registry

env:
  CARGO_TERM_COLOR: never
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"

jobs:
  test:
    name: Rust Test
    runs-on: ubuntu-latest
    env:
      CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"
    container:
      image: ghcr.io/foresightminingsoftwarecorporation/rust-test:${{ inputs.toolchain }}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Additional Script
        run: ${{ inputs.additional_script }}
        shell: bash
        working-directory: ${{ inputs.working-directory }}

      - name: Update Packages
        if: inputs.required_packages != ''
        run: apt-get update -yq && apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.1.0
        if: inputs.login_private_registry == 'true'
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.FSE_SSH_PRIVATE_KEY }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: fmt
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: fmt
        continue-on-error: true
        with:
          command: "cargo fmt --verbose --all -- --check"
          working-directory: ${{ inputs.working-directory }}

      - name: check
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: check
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.fmt.outcome == 'success'
        with:
          command: "cargo check ${{ inputs.additional_args }}"
          working-directory: ${{ inputs.working-directory }}

      - name: run clippy
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: clippy
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.check.outcome == 'success'
        with:
          command: "cargo clippy ${{ inputs.additional_args }} -- -D warnings"
          working-directory: ${{ inputs.working-directory }}

      - name: Copy Default deny if not exists
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f deny.yml ]; then
            wget https://raw.githubusercontent.com/ForesightMiningSoftwareCorporation/github/main/deny.toml
          fi

      - name: check license
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: deny-license
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.clippy.outcome == 'success'
        with:
          command: "cargo deny check licenses"
          working-directory: ${{ inputs.working-directory }}

      - name: check bans
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: deny-bans
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.clippy.outcome == 'success'
        with:
          command: "cargo deny check bans"
          working-directory: ${{ inputs.working-directory }}

      - name: check advisories
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: deny-advisories
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.clippy.outcome == 'success'
        with:
          command: "cargo deny check advisories"
          working-directory: ${{ inputs.working-directory }}

      - name: check sources
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: deny-sources
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.clippy.outcome == 'success'
        with:
          command: "cargo deny check sources"
          working-directory: ${{ inputs.working-directory }}

      - name: unused dependencies
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: dependencies
        continue-on-error: true
        if: inputs.fail-fast == 'false' || steps.clippy.outcome == 'success'
        with:
          command: "cargo machete"
          working-directory: ${{ inputs.working-directory }}

      - name: Tests
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1.1.0
        id: tests
        continue-on-error: true
        if: inputs.skip-cargo-test == 'false' && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success')
        with:
          command: "cargo test ${{ inputs.additional_args }}"
          working-directory: ${{ inputs.working-directory }}

      - uses: actions/github-script@v6
        name: Report status on PR
        if: github.event_name != 'push' && github.event_name != 'workflow_dispatch'
        with:
          script: |
            const output =`
            <details>
            <summary><h3>${{ (steps.fmt.outcome == 'failure' || steps.check.outcome == 'failure' || steps.clippy.outcome == 'failure' || steps.tests.outcome == 'failure') && '‚úÖ' || '‚ùå' }} ${{ inputs.working-directory }}</h3> (click for details)</summary>
            <table>
              <tr><th>required</th><th>step</th><th>result</th><th>details</th></tr>
              <tr>
                <td align="center">üîò</td>
                <td>\`cargo fmt --verbose --all -- --check\`</td>
                <td>\`${{ steps.fmt.outcome == 'success' && '‚úÖ' || (steps.fmt.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.fmt.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">üîò</td>
                <td>\`cargo check ${{ inputs.additional_args }}\`</td>
                <td>\`${{ steps.check.outcome == 'success' && '‚úÖ' || (steps.check.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.check.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">üîò</td>
                <td>\`cargo clippy ${{ inputs.additional_args }} -- -D warnings\`</td>
                <td>\`${{ steps.clippy.outcome == 'success' && '‚úÖ' || (steps.clippy.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.clippy.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">‚ö´</td>
                <td>\`cargo deny check licenses\`</td>
                <td>\`${{ steps.deny-license.outcome == 'success' && '‚úÖ' || (steps.deny-license.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.deny-license.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">‚ö´</td>
                <td>\`cargo deny check bans\`</td>
                <td>\`${{ steps.deny-bans.outcome == 'success' && '‚úÖ' || (steps.deny-bans.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.deny-bans.summary }}</td>
              </tr>
                <tr>
                  <td align="center">‚ö´</td>
                  <td>\`cargo deny check advisories\`</td>
                  <td>\`${{ steps.deny-advisories.outcome == 'success' && '‚úÖ' || (steps.deny-advisories.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.deny-advisories.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">‚ö´</td>
                <td>\`cargo deny check sources\`</td>
                <td>\`${{ steps.deny-sources.outcome == 'success' && '‚úÖ' || (steps.deny-sources.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.deny-sources.summary }}</td>
              </tr>
              <tr>
                <td align="center">‚ö´</td>
                <td>\`cargo machete\`</td>
                <td>\`${{ steps.dependencies.outcome == 'success' && '‚úÖ' || (steps.dependencies.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.dependencies.outputs.summary }}</td>
              </tr>
              <tr>
                <td align="center">üîò</td>
                <td>\`cargo test ${{ inputs.additional_args }}\`</td>
                <td>\`${{ steps.tests.outcome == 'success' && '‚úÖ' || (steps.tests.outcome == 'skipped' && 'üî∂' || '‚ùå') }}\`</td>
                <td>${{ steps.tests.outputs.summary }}</td>
              </tr>
            </table>

            Pushed by: \`@${{ github.actor }}\`, Action: \`${{ github.event_name }}\`;
            Run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a>
            </details>`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Rust Test status
        if: steps.fmt.outcome == 'failure' || steps.check.outcome == 'failure' || steps.clippy.outcome == 'failure' || steps.tests.outcome == 'failure'
        run: exit 1