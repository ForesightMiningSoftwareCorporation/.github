on:
  workflow_call:
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      toolchain:
        type: string
        default: "1.73"
        description: Rust toolchain to install
      nightly_toolchain:
        type: string
        default: "nightly-2023-08-02"
        description: Rust toolchain to install
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      additional_cache_path:
        type: string
        default: ""
        description: Path of additional cache to get
      additional_cache_key:
        type: string
        default: ""
        description: Key of additional cache to get
      additional_cache_miss:
        type: string
        default: ""
        description: Script to run if additional cache miss
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      workspaces:
        type: string
        default: '[""]'
        description: JSON array of of Cargo workspaces
      crates-directory:
        type: string
        default: "crates"
        description: The location of sub-crates inside a workspace
      custom_cargo_commands:
        type: string
        default: ""
        description: Custom cargo commands that will be run after login
      fail-fast:
        type: string
        default: "true"
        description: Should all the test ran or fail early
      skip-tests-no-changes:
        type: string
        default: "false"
        description: Skip tests when no changes were detected in any cargo workspace
      skip-cargo-test:
        type: string
        default: "false"
        description: Should we skip cargo test (useful when there are no tests defined)
      skip-miri-test:
        type: string
        default: "false"
        description: Should we skip miri test (useful when tests are incompatible)
      test-publish-required:
        type: string
        default: "false"
        description: "Should the publish dry-run test be marked as required"
      login_private_registry:
        type: string
        default: "true"
        description: Should we login to the private registry

env:
  CARGO_TERM_COLOR: never
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Build Test Matrix
        id: build
        uses: ForesightMiningSoftwareCorporation/action-changed-rust-workspaces@v0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workspaces: ${{ inputs.workspaces }}
          base_ref: ${{ github.base_ref }}
          head_ref: ${{ github.head_ref }}
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      fallback-matrix: ${{ steps.build.outputs.fallback }}

  check:
    name: Rust ${{ matrix.type }}
    runs-on: [self-hosted, gpu]
    needs: build-matrix
    env:
      CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"
    strategy:
      matrix:
        type: [check, test, miri]
        path: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
        include:
          - toolchain: ${{ inputs.toolchain }}
          - type: miri
            toolchain: ${{ inputs.nightly_toolchain }}
      fail-fast: ${{ inputs.fail-fast == 'true' }}
    steps:
      - name: Configure Git to use global ignore file
        shell: bash
        run: git config --global core.excludesfile ~/.gitignore_global
      - name: "Ensure we don't track the new resources in git"
        shell: bash
        run: |
          echo "output.txt" >> ~/.gitignore_global
          echo "deny.toml" >> ~/.gitignore_global

      - name: Checkout
        uses: actions/checkout@v4

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1
        if: inputs.login_private_registry == 'true' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.FSE_SSH_PRIVATE_KEY }}
            ${{ secrets.BEVY_CLIPMAP_SSH_PRIVATE_KEY }}
            ${{ secrets.DAG_TABLES_SSH_PRIVATE_KEY }}

      - name: Additional Cache
        id: additional-cache
        uses: actions/cache@v3
        if: inputs.additional_cache_key != '' && inputs.additional_cache_path != '' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        with:
          path: ${{ inputs.additional_cache_path }}
          key: ${{ inputs.additional_cache_key }}-${{ github.ref_name }}
          restore-keys: |
            ${{ inputs.additional_cache_key }}-${{ github.base_ref }}
            ${{ inputs.additional_cache_key }}

      - name: Additional Cache Miss Command
        if: steps.additional-cache.outputs.cache-hit != 'true' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        shell: bash
        run: ${{ inputs.additional_cache_miss }}

      - name: Additional Script
        run: ${{ inputs.additional_script }}
        if: inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true'
        shell: bash
        working-directory: ${{ matrix.path }}

      - name: Update Packages
        if: inputs.required_packages != '' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        run: apt-get update -yq && apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        if: inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true'
        with:
          shared-key: "${{ github.job }}-${{ matrix.type }}"
          env-vars: ""
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Get crate name
        id: name
        shell: bash
        working-directory: ${{ matrix.path }}
        run: |
          echo "value=$(tomlq package.name -f Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Set start time as env variable
        id: start_time
        if: github.event_name != 'push' && github.event_name != 'workflow_dispatch' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT

      - name: Run Cargo Custom command
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: custom
        if: inputs.custom_cargo_commands != '' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true')
        continue-on-error: true
        with:
          command: ${{ inputs.custom_cargo_commands }}
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: fmt
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: fmt
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || inputs.custom_cargo_commands == '' || steps.custom.outcome == 'success')
        with:
          command: "cargo fmt --verbose --all -- --check"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: check
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: check
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.fmt.outcome == 'success')
        with:
          command: "cargo check ${{ needs.build-matrix.outputs.fallback-matrix == 'true' && '--workspace' || '' }} ${{ inputs.additional_args }}"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: run clippy
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: clippy
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.check.outcome == 'success' && !cancelled())
        with:
          command: "cargo clippy ${{ needs.build-matrix.outputs.fallback-matrix == 'true' && '--workspace' || '' }} ${{ inputs.additional_args }} -- -D warnings"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: documentation
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: doc
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: 'RUSTDOCFLAGS="-D warnings" cargo doc --no-deps'
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: Copy Default deny if not exists
        shell: bash
        working-directory: ${{ matrix.path }}
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        run: |
          if [ ! -f deny.toml ]; then
            curl -o deny.toml https://raw.githubusercontent.com/ForesightMiningSoftwareCorporation/github/main/deny.toml
          fi

      - name: check license
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: deny-license
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check licenses"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: check bans
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: deny-bans
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check bans"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: check advisories
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: deny-advisories
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check advisories"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: check sources
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: deny-sources
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check sources"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: unused dependencies
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: dependencies
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo machete"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: Publishing DryRun
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: publish-dryrun
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && (inputs.fail-fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo package ${{ needs.build-matrix.outputs.fallback-matrix == 'true' && '--workspace' || '' }} ${{ inputs.additional_args }}"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: Tests
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: tests
        if: matrix.type == 'test' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && inputs.skip-cargo-test == 'false' && (inputs.fail-fast == 'false' || !cancelled())
        with:
          command: "cargo test ${{ inputs.fail-fast == 'false' && '--keep-going' || '' }} ${{ needs.build-matrix.outputs.fallback-matrix == 'true' && '--workspace' || '' }} ${{ inputs.additional_args }}"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - name: Miri
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v1
        id: miri
        continue-on-error: true
        if: matrix.type == 'miri' && (inputs.skip-tests-no-changes != 'true' && true || needs.build-matrix.outputs.fallback-matrix != 'true') && inputs.skip-cargo-test == 'false' && inputs.skip-miri-test == 'false' && (inputs.fail-fast == 'false' || !cancelled())
        with:
          command: "cargo miri test ${{ inputs.fail-fast == 'false' && '--keep-going' || '' }} ${{ needs.build-matrix.outputs.fallback-matrix == 'true' && '--workspace' || '' }} ${{ inputs.additional_args }}"
          working-directory: ${{ matrix.path }}
          loki_url: ${{ vars.LOKI_URL }}
          loki_username: ${{ secrets.LOKI_GITHUB_USERNAME }}
          loki_password: ${{ secrets.LOKI_GITHUB_PASSWORD }}
          loki_org_id: 1

      - uses: cloudposse/github-action-matrix-outputs-write@0.4.2
        id: out
        if: always()
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.path }}-${{ matrix.type }}
          outputs: |-
            check_outcome: ${{ steps.check.outcome }}
            clippy_outcome: ${{ steps.clippy.outcome }}
            doc_outcome: ${{ steps.doc.outcome }}
            custom_outcome: ${{ steps.custom.outcome }}
            deny-advisories_outcome: ${{ steps.deny-advisories.outcome }}
            deny-bans_outcome: ${{ steps.deny-bans.outcome }}
            deny-license_outcome: ${{ steps.deny-license.outcome }}
            deny-sources_outcome: ${{ steps.deny-sources.outcome }}
            dependencies_outcome: ${{ steps.dependencies.outcome }}
            fmt_outcome: ${{ steps.fmt.outcome }}
            miri_outcome: ${{ steps.miri.outcome }}
            name: ${{ steps.name.outputs.value }}
            publish-dryrun_outcome: ${{ steps.publish-dryrun.outcome }}
            start: ${{ steps.start_time.outputs.value }}
            tests_outcome: ${{ steps.tests.outcome }}

  results:
    name: Rust Test Results
    runs-on: ubuntu-latest
    needs:
      - check
      - build-matrix
    if: always()
    steps:
      - name: Set end time as env variable
        id: end_time
        if: always()
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT

      - uses: cloudposse/github-action-matrix-outputs-read@0.1.1
        id: read
        if: always()
        with:
          matrix-step-name: check

      - uses: int128/hide-comment-action@v1
        if: always() && github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        with:
          authors: |
            github-actions

      - uses: actions/github-script@v6
        name: Report status on PR
        id: comment
        if: always()
        with:
          result-encoding: string
          script: |
            if (${{ inputs.skip-tests-no-changes != 'true' && false || needs.build-matrix.outputs.fallback-matrix == 'true' }}) {
              if (context.eventName === 'pull_request' || context.eventName === 'pull_request_target') {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '###  No changes detected - tests skipped `⏭`'
                });
              }

              return "0";
            }

            function outcomeEmoji(outcome) {
              switch (outcome) {
                case 'success':
                  return '✅';
                case 'skipped':
                  return '⏭';
                case 'cancelled':
                  return '⛔';
                case 'failure':
                  return '❌';
                default:
                  return '❔';
              }
            }

            function is_success(...args) {
              return args.reduce((acc, x) => acc && (x === 'success'), true);
            }

            const result_string = `${{ steps.read.outputs.result }}`;
            let data;
            let paths;
            try {
              data = JSON.parse(result_string);
              const first_val = data['check_outcome'];
              paths = [...new Set(Object.keys(first_val).map(key => key.split('-')[0]))].sort();
            } catch {
              return "0";
            }

            let test_output = '';
            const table_footer = '</table>\n';
            let start_time = '';
            let success = true;

            for (let path of paths) {

              const fetch_string = (name, type) => data[name]['' + path + '-' + type];

              start_time = fetch_string('start', 'check');

              const workspace_args = ${{ needs.build-matrix.outputs.fallback-matrix }} ? '--workspace' : '';

              const entry = (name, outcome, required, logId) => `
            <tr>
            <td align="center">${ required ? '✓' : '' }</td>
            <td>${ name }</td>
            <td>${ outcomeEmoji(outcome) }</td>
            <td><a href="${{vars.GRAFANA_URL}}/d/${{vars.ACTION_LOG_DASHBOARD_ID}}var-run_id=${{ github.run_id }}&var-test=${ logId }&from=${ start_time }&to=${{ steps.end_time.outputs.value }}">Logs</a></td>
            </tr>
            `;

              const custom = entry('Custom: ${{ inputs.custom_cargo_commands }}', fetch_string('custom_outcome', 'check'), true, 'custom');
              const fmt = entry('cargo fmt --verbose --all -- --check', fetch_string('fmt_outcome', 'check'), true, 'fmt');
              const check = entry(`cargo check ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('check_outcome', 'check'), true, 'check');
              const clippy = entry(`cargo clippy ${ workspace_args } ${{ inputs.additional_args }} -- -D warnings`, fetch_string('clippy_outcome', 'check'), true, 'clippy');
              const doc = entry('cargo doc', fetch_string('doc_outcome', 'check'), false, 'doc');
              const licenses = entry('cargo deny check licenses', fetch_string('deny-license_outcome', 'check'), false, 'deny-license');
              const bans = entry('cargo deny check bans', fetch_string('deny-bans_outcome', 'check'), false, 'deny-bans');
              const advisories = entry('cargo deny check advisories', fetch_string('deny-advisories_outcome', 'check'), false, 'deny-advisories');
              const sources = entry('cargo deny check sources', fetch_string('deny-sources_outcome', 'check'), false, 'deny-sources');
              const machete = entry('cargo machete', fetch_string('dependencies_outcome', 'check'), false, 'dependencies');
              const test = entry(`cargo test ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('tests_outcome', 'test'), true, 'tests');
              const miri = entry(`cargo miri test ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('miri_outcome', 'miri'), false, 'miri');
              const publish = entry(`cargo publish --dry-run ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('publish-dryrun_outcome', 'check'), ${{ inputs.test-publish-required == 'true' }}, 'publish-dryrun');

              const path_success = is_success(fetch_string('fmt_outcome', 'check'), fetch_string('check_outcome', 'check'), fetch_string('clippy_outcome', 'check'), fetch_string('tests_outcome', 'test'), (${{ inputs.test-publish-required }} ? fetch_string('publish-dryrun_outcome', 'check') : 'success'));

              test_output += `
            <h3>${ fetch_string('name', 'check') } - ${ path_success ? '✅' : '❌' }</h3>
            <table>
            <tr><th>required</th><th>step</th><th>result</th><th>details</th></tr>
            `;
              test_output += custom + fmt + check + clippy + doc + licenses + bans + advisories + sources + machete + test + miri + publish;
              test_output += table_footer;
              success &= path_success;
            }

            const footer = `
            Pushed by: ${{ github.actor }}, Action: ${{ github.event_name }};
            Run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a>
            Logs: <a href="${{vars.GRAFANA_URL}}/d/${{vars.ACTION_LOG_DASHBOARD_ID}}var-run_id=${{ github.run_id }}&var-test=All&from=${ start_time }&to=${{ steps.end_time.outputs.value }}">Logs</a>
            `;

            const output = test_output + footer;

            if (context.eventName === 'pull_request' || context.eventName === 'pull_request_target') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

            return success ? "0" : "1";

      - name: Rust Test status
        run: exit ${{ steps.comment.outputs.result }}
