on:
  workflow_call:
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      initial_event_name:
        type: string
        default: "push"
        description: Event that triggered the workflow
      runner:
        type: string
        default: "ubuntu-latest"
      public-registry:
        type: string
        default: "false"
      private-registry-host:
        required: true
        type: string
      private-registry-name:
        required: true
        type: string
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
    secrets:
      github-token:
        required: true
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent
      private-registry-private-key:
        required: true
      private-registry-token:
        required: true

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.private-registry-token }}"

jobs:
  test:
    name: Rust Test (fmt and clippy)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/foresightminingsoftwarecorporation/rust-test:${{ inputs.toolchain }}
      options: --user root
      env:
        GITHUB_PRIVATE_KEYS: ${{ secrets.github-private-keys }}
        CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.private-registry-token }}"
    steps:
      - name: Classic git Checkout
        if: ${{ inputs.initial_event_name != 'pull_request_target' }}
        uses: actions/checkout@v3
      - name: Git Checkout for Pull Request Target
        if: ${{ github.initial_event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          github-token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@beta
        if: ${{ inputs.public-registry != 'true'}}
        with:
          host: ${{ inputs.private-registry-host }}
          name: ${{ inputs.private-registry-name }}
          private_key: ${{ secrets.private-registry-private-key }}
          token: ${{ secrets.private-registry-token }}
          additional_private_keys: ${{ env.GITHUB_PRIVATE_KEYS }}

      - name: Additional Script
        run: ${{ inputs.additional_script }}
        shell: bash
        working-directory: ${{ inputs.working-directory }}

      - name: Update Packages
        if: inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: fmt
        shell: bash
        id: fmt
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo fmt --verbose --all -- --check

      - name: check
        shell: bash
        id: check
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo check ${{ inputs.additional_args }}

      - name: run clippy
        shell: bash
        id: clippy
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo clippy ${{ inputs.additional_args }} -- -D warnings

      - name: Copy Default deny if not exists
        shell: bash
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f deny.yml ]; then
            wget https://raw.githubusercontent.com/ForesightMiningSoftwareCorporation/github/main/deny.toml
          fi


      - name: check license
        shell: bash
        id: deny-license
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo deny check licenses

      - name: unused dependencies
        shell: bash
        id: dependencies
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo machete

      - name: Tests
        shell: bash
        id: tests
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: cargo test ${{ inputs.additional_args }}

      - uses: actions/github-script@v6
        name: Report status on PR
        with:
          script: |
            const output = `
            |    | step                                                                 | result                                                                                                                | 
            | -- | -------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- |
            | 🖌 | `cargo fmt --verbose --all -- --check`                               | ${{ steps.fmt.outcome == "success" && ✅ || (${{ steps.fmt.outcome == "failure" && ❌ || 🟧️️) }}                       |
            | 🛂 | `cargo check ${{ inputs.additional_args }}`                          | ${{ steps.check.outcome == "success" && ✅ || (${{ steps.check.outcome == "failure" && ❌ || 🟧️️) }}                   |
            | 🦀 | `cargo clippy ${{ inputs.additional_args }} -- -D warnings`          | ${{ steps.clippy.outcome == "success" && ✅ || (${{ steps.clippy.outcome == "failure" && ❌ || 🟧️️) }}                 |
            | 🪪 | `cargo deny check licenses`                                          | ${{ steps.deny-license.fmt.outcome == "success" && ✅ || (${{ steps.deny-license.outcome == "failure" && ❌ || 🟧️️) }} |
            | 🌴 | `cargo machete`                                                      | ${{ steps.dependencies.outcome == "success" && ✅ || (${{ steps.dependencies.outcome == "failure" && ❌ || 🟧️️) }}     |
            | 🧪 | `cargo test ${{ inputs.additional_args }}`                           | ${{ steps.tests.outcome == "success" && ✅ || (${{ steps.tests.outcome == "failure" && ❌ || 🟧️️) }}                   |

            
            Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`;
            Run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a>`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Rust Test status
        if: failure()
        run: exit 1