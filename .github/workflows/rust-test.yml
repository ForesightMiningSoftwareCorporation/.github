on:
  workflow_call:
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      initial_event_name:
        type: string
        default: "push"
        description: Event that triggered the workflow
      revision:
        type: string
        default: ""
        description: Revision to pull
      runner:
        type: string
        default: "ubuntu-latest"
      public-registry:
        type: string
        default: "false"
      private-registry-host:
        required: true
        type: string
      private-registry-name:
        required: true
        type: string
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
    secrets:
      github-token:
        required: true
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent
      private-registry-private-key:
        required: true
      private-registry-token:
        required: true

env:
  CARGO_TERM_COLOR: never
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.private-registry-token }}"

jobs:
  test:
    name: Rust Test (fmt and clippy)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/foresightminingsoftwarecorporation/rust-test:${{ inputs.toolchain }}
      options: --user root
      env:
        GITHUB_PRIVATE_KEYS: ${{ secrets.github-private-keys }}
        CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.private-registry-token }}"
    steps:
      - name: Classic git Checkout
        if: ${{ inputs.initial_event_name != 'pull_request_target' }}
        uses: actions/checkout@v3
      - name: Git Checkout for Pull Request Target
        if: ${{ inputs.initial_event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          github-token: ${{ secrets.github-token }}
          ref: ${{ inputs.revision }}
      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.0.0
        if: ${{ inputs.public-registry != 'true'}}
        with:
          host: ${{ inputs.private-registry-host }}
          name: ${{ inputs.private-registry-name }}
          private_key: ${{ secrets.private-registry-private-key }}
          token: ${{ secrets.private-registry-token }}
          additional_private_keys: ${{ env.GITHUB_PRIVATE_KEYS }}

      - name: Additional Script
        run: ${{ inputs.additional_script }}
        shell: bash
        working-directory: ${{ inputs.working-directory }}

      - name: Update Packages
        if: inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: fmt
        shell: bash
        id: fmt
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo fmt --verbose --all -- --check 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc
      - name: check
        shell: bash
        id: check
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo check ${{ inputs.additional_args }} 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: run clippy
        shell: bash
        id: clippy
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo clippy ${{ inputs.additional_args }} -- -D warnings 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: Copy Default deny if not exists
        shell: bash
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f deny.yml ]; then
            wget https://raw.githubusercontent.com/ForesightMiningSoftwareCorporation/github/main/deny.toml
          fi

      - name: check license
        shell: bash
        id: deny-license
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo deny check licenses 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: check bans
        shell: bash
        id: deny-bans
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo deny check bans 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: check advisories
        shell: bash
        id: deny-advisories
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo deny check advisories 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: check sources
        shell: bash
        id: deny-sources
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo deny check sources 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: unused dependencies
        shell: bash
        id: dependencies
        continue-on-error: true
        if: success()
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo machete 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - name: Tests
        shell: bash
        id: tests
        continue-on-error: true
        if: inputs.initial_event_name == 'pull_request'
        working-directory: ${{ inputs.working-directory }}
        run: |
          if result=$(cargo test ${{ inputs.additional_args }} 2>&1); then
            stdout=$result
            rc=0
          else
            rc=$?
            stderr=$result
          fi
          echo "$stdout"
          echo "$stderr"
          echo "stdout<<EOF"$'\n'"$stdout"$'\n'EOF >> $GITHUB_OUTPUT
          echo "stderr<<EOF"$'\n'"$stderr"$'\n'EOF >> $GITHUB_OUTPUT
          echo "exitcode=$rc" >> $GITHUB_OUTPUT
          exit $rc

      - uses: actions/github-script@v6
        name: Report status on PR
        with:
          script: |
            const output =`
            <table>
              <tr><th>required</th><th>step</th><th>result</th><th>details</th></tr>
              <tr>
                <td>âœ…</td>
                <td>\`cargo fmt --verbose --all -- --check\`</td>
                <td>\`${{ steps.fmt.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.fmt.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td>âœ…</td>
                            <td>\`cargo check ${{ inputs.additional_args }}\`</td>
                            <td>\`${{ steps.check.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.check.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.check.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td>âœ…</td>
                            <td>\`cargo clippy ${{ inputs.additional_args }} -- -D warnings\`</td>
                            <td>\`${{ steps.clippy.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.clippy.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.clippy.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td>âœ…</td>
                            <td>\`cargo deny check licenses\`</td>
                            <td>\`${{ steps.deny-license.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.deny-license.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.deny-license.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>\`cargo deny check bans\`</td>
                            <td>\`${{ steps.deny-bans.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.deny-bans.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.deny-bans.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>\`cargo deny check advisories\`</td>
                            <td>\`${{ steps.deny-advisories.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.deny-advisories.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.deny-advisories.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>\`cargo deny check sources\`</td>
                            <td>\`${{ steps.deny-sources.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.deny-sources.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.deny-sources.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td>âœ…</td>
                            <td>\`cargo machete\`</td>
                            <td>\`${{ steps.dependencies.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.dependencies.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.dependencies.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
                          </tr>
                          <tr>
                            <td>âœ…</td>
                            <td>\`cargo test ${{ inputs.additional_args }}\`</td>
                            <td>\`${{ steps.tests.outcome }}\`</td>
            <td>
            <details>
            <summary>More details</summary>
            
            ### stdout
            \`\`\`bash
            ${{ steps.tests.outputs.stdout }}
            \`\`\`
            ### stderr
            \`\`\`bash
            ${{ steps.tests.outputs.stderr }}
            \`\`\`
            </details>
            
            </td>
              </tr>
            </table>

            Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`;
            Run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a>`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Rust Test status
        if: steps.fmt.outcome == 'failure' || steps.check.outcome == 'failure' || steps.clippy.outcome == 'failure' || steps.deny-license.outcome == 'failure' || steps.dependencies.outcome == 'failure' || steps.tests.outcome == 'failure'
        run: exit 1