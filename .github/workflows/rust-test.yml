on:
  workflow_call:
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      toolchain:
        type: string
        default: "1.75"
        description: Rust toolchain to install. Do not set this to moving targets like "stable", instead leave it empty and regularly bump the default in this file.
      nightly_toolchain:
        type: string
        default: "nightly-2023-08-02"
        description: Rust toolchain to install. Do not set this to moving targets like "nightly", instead leave it empty and regularly bump the default in this file.
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      additional_cache_path:
        type: string
        default: ""
        description: Path of additional cache to get
      additional_cache_key:
        type: string
        default: ""
        description: Key of additional cache to get
      additional_cache_miss:
        type: string
        default: ""
        description: Script to run if additional cache miss
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      working_directory:
        type: string
        default: ""
        description: Subdirectory to treat as repo root
      custom_cargo_commands:
        type: string
        default: ""
        description: Custom cargo commands that will be run after login
      fail_fast:
        type: string
        default: "true"
        description: Should all the test ran or fail early
      skip_miri_test:
        type: string
        default: "false"
        description: Should we skip miri test (useful when tests are incompatible)
      test_publish_required:
        type: string
        default: "false"
        description: "Should the publish dry-run test be marked as required"

env:
  CARGO_TERM_COLOR: never
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"

jobs:
  derive_runner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: 'rust-toolchain.toml'
      - name: Get rust channel
        id: rust-channel
        shell: bash
        run: |
          echo "value=$(yq -p toml '.toolchain.channel' < rust-toolchain.toml || echo '${{ inputs.toolchain }}')" >> $GITHUB_OUTPUT
    outputs:
      rust-channel: ${{ steps.rust-channel.outputs.value }}

  check:
    name: Rust ${{ matrix.type }} ${{ inputs.working_directory }}
    runs-on: [self-hosted, "gpu", "${{ needs.derive_runner.outputs.rust-channel }}", "${{ github.run_id }}__${{ inputs.working_directory }}__${{ matrix.type }}__${{ github.run_attempt }}"]
    needs: derive_runner
    env:
      CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"
      RUSTC_WRAPPER: "sccache"
    strategy:
      matrix:
        type: [check, test, miri]
        include:
          - toolchain: ${{ inputs.toolchain }}
          - type: miri
            toolchain: ${{ inputs.nightly_toolchain }}
      fail-fast: ${{ inputs.fail_fast == 'true' }}
    steps:
      - name: Configure Git to use global ignore file
        shell: bash
        run: git config --global core.excludesfile ~/.gitignore_global
      - name: "Ensure we don't track the new resources in git"
        shell: bash
        run: |
          echo "output.txt" >> ~/.gitignore_global
          echo "deny.toml" >> ~/.gitignore_global

      - name: "Update rustup only if version is different thant toolchain"
        shell: bash
        run: |
          rustup set auto-self-update disable

      - name: Checkout
        uses: actions/checkout@v4

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.FSE_SSH_PRIVATE_KEY }}
            ${{ secrets.BEVY_CLIPMAP_SSH_PRIVATE_KEY }}
            ${{ secrets.DAG_TABLES_SSH_PRIVATE_KEY }}
            ${{ secrets.VOLUMESIGHT_SSH_PRIVATE_KEY }}

      - name: Additional Cache
        id: additional-cache
        uses: tespkg/actions-cache@v1
        if: inputs.additional_cache_key != '' && inputs.additional_cache_path != ''
        with:
          endpoint: ${{ vars.CI_CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CI_CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CI_CACHE_SECRET_KEY }}
          bucket: ${{ vars.CI_CACHE_BUCKET }}
          path: ${{ inputs.additional_cache_path }}
          key: ${{ inputs.additional_cache_key }}-${{ github.ref_name }}
          restore-keys: |
            ${{ inputs.additional_cache_key }}-${{ github.base_ref }}
            ${{ inputs.additional_cache_key }}

      - name: Additional Cache Miss Command
        if: steps.additional-cache.outputs.cache-hit == 'false'
        shell: bash
        run: ${{ inputs.additional_cache_miss }}

      - name: Additional Script
        if: ${{ inputs.additional_script != '' }}
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: ${{ inputs.additional_script }}

      - name: Update Packages
        if: inputs.required_packages != ''
        run: apt-get update -yq && apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Cache Dependencies
        uses: mozilla-actions/sccache-action@v0.0.3
        env:
          SSCACHE_BUCKET: ${{ vars.CI_CACHE_BUCKET }}
          SSCACHE_REGION: "auto"
          SSCACHE_ENDPOINT: "https://${{ vars.CI_CACHE_ENDPOINT }}"
          AWS_ACCESS_KEY: ${{ secrets.CI_CACHE_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CI_CACHE_SECRET_KEY }}

      - name: Get crate name
        id: name
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "value=$(yq -p toml '.package.name' < Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Set start time as env variable
        id: start_time
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT

      - name: Run Cargo Custom command
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: custom
        if: inputs.custom_cargo_commands != ''
        continue-on-error: true
        with:
          command: ${{ inputs.custom_cargo_commands }}
          working_directory: ${{ inputs.working_directory }}

      - name: fmt
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: fmt
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || inputs.custom_cargo_commands == '' || steps.custom.outcome == 'success' && !cancelled())
        with:
          command: "cargo fmt --verbose --all -- --check"
          working_directory: ${{ inputs.working_directory }}

      - name: check
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: check
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.fmt.outcome == 'success' && !cancelled())
        with:
          command: "cargo check ${{ inputs.additional_args }}" # todo: feed back the `workspace
          working_directory: ${{ inputs.working_directory }}

      - name: run clippy
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: clippy
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.check.outcome == 'success' && !cancelled())
        with:
          command: "cargo clippy ${{ inputs.additional_args }} -- -D warnings"
          working_directory: ${{ inputs.working_directory }}

      - name: documentation
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: doc
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "RUSTDOCFLAGS='-D warnings' cargo doc --no-deps"
          working_directory: ${{ inputs.working_directory }}

      - name: Copy Default deny if not exists
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        run: |
          if [ ! -f deny.toml ]; then
            curl -o deny.toml https://raw.githubusercontent.com/ForesightMiningSoftwareCorporation/github/main/deny.toml
          fi

      - name: check license
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: deny-license
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check licenses"
          working_directory: ${{ inputs.working_directory }}

      - name: check bans
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: deny-bans
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check bans"
          working_directory: ${{ inputs.working_directory }}

      - name: check advisories
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: deny-advisories
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check advisories"
          working_directory: ${{ inputs.working_directory }}

      - name: check sources
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: deny-sources
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo deny check sources"
          working_directory: ${{ inputs.working_directory }}

      - name: unused dependencies
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: dependencies
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo machete"
          working_directory: ${{ inputs.working_directory }}

      - name: Publishing DryRun
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: publish-dryrun
        continue-on-error: true
        if: matrix.type == 'check' && (inputs.fail_fast == 'false' || steps.clippy.outcome == 'success' && !cancelled())
        with:
          command: "cargo package"
          working_directory: ${{ inputs.working_directory }}

      - name: Tests
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: tests
        if: matrix.type == 'test' && (inputs.fail_fast == 'false' || !cancelled())
        with:
          command: "cargo test ${{ inputs.fail_fast == 'false' && '--no-fail_fast' || '' }} ${{ inputs.additional_args }}"
          working_directory: ${{ inputs.working_directory }}

      - name: Miri
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/shell-with-output@v2
        id: miri
        continue-on-error: true
        if: matrix.type == 'miri' && inputs.skip_miri_test == 'false' && (inputs.fail_fast == 'false' || !cancelled())
        with:
          command: "cargo miri test ${{ inputs.fail_fast == 'false' && '--keep-going' || '' }} ${{ inputs.additional_args }}"
          working_directory: ${{ inputs.working_directory }}

      - uses: ForesightMiningSoftwareCorporation/github-action-matrix-outputs-write@main
        id: out
        if: always()
        with:
          matrix-step-name: check-${{ github.run_attempt }}
          matrix-key: ${{ inputs.working_directory }}-${{ matrix.type }}
          outputs: |-
            check_outcome: ${{ steps.check.outcome }}
            clippy_outcome: ${{ steps.clippy.outcome }}
            doc_outcome: ${{ steps.doc.outcome }}
            custom_outcome: ${{ steps.custom.outcome }}
            deny-advisories_outcome: ${{ steps.deny-advisories.outcome }}
            deny-bans_outcome: ${{ steps.deny-bans.outcome }}
            deny-license_outcome: ${{ steps.deny-license.outcome }}
            deny-sources_outcome: ${{ steps.deny-sources.outcome }}
            dependencies_outcome: ${{ steps.dependencies.outcome }}
            fmt_outcome: ${{ steps.fmt.outcome }}
            miri_outcome: ${{ steps.miri.outcome }}
            name: ${{ steps.name.outputs.value }}
            publish-dryrun_outcome: ${{ steps.publish-dryrun.outcome }}
            start: ${{ steps.start_time.outputs.value }}
            tests_outcome: ${{ steps.tests.outcome }}

  results:
    name: Rust Test Results
    runs-on: ubuntu-latest
    needs:
      - check
    if: always()
    steps:
      - name: Set end time as env variable
        id: end_time
        if: always()
        run: echo "value=$(date +'%s')000" >> $GITHUB_OUTPUT

      - uses: cloudposse/github-action-matrix-outputs-read@0.1.1
        id: read
        if: always()
        with:
          matrix-step-name: check-${{ github.run_attempt }}

      - uses: int128/hide-comment-action@v1
        if: always() && github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        with:
          authors: |
            github-actions

      - uses: actions/github-script@v6
        name: Report status on PR
        id: comment
        if: always()
        with:
          result-encoding: string
          script: |
            if (context.eventName !== 'pull_request' && context.eventName !== 'pull_request_target') {
              return "0";
            }
            function outcomeEmoji(outcome) {
              switch (outcome) {
                case 'success':
                  return '✅';
                case 'skipped':
                  return '⏭';
                case 'cancelled':
                  return '⛔';
                case 'failure':
                  return '❌';
                default:
                  return '❔';
              }
            }

            function is_success(...args) {
              return args.reduce((acc, x) => acc && (x === 'success'), true);
            }

            const result_string = `${{ steps.read.outputs.result }}`;
            let data;
            let paths;
            try {
              data = JSON.parse(result_string);
              const first_val = data['check_outcome'];
              paths = [...new Set(Object.keys(first_val).map(key => key.split('-')[0]))].sort();
            } catch {
              if (context.eventName === 'pull_request' || context.eventName === 'pull_request_target') {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '###  Run failed - no results found `❌`'
                });
              }

              return "1";
            }

            let test_output = '';
            const table_footer = '</table>\n';
            let start_time = '';
            let success = true;

            for (let path of paths) {

              const fetch_string = (name, type) => data[name]['' + path + '-' + type];

              start_time = fetch_string('start', 'check');

              const workspace_args = ''; 

              const entry = (name, outcome, required, logId) => `
            <tr>
            <td align="center">${ required ? '✓' : '' }</td>
            <td>${ name }</td>
            <td>${ outcomeEmoji(outcome) }</td>
            <td><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Logs</a></td>
            </tr>
            `;

              const custom = entry('Custom: ${{ inputs.custom_cargo_commands }}', fetch_string('custom_outcome', 'check'), true, 'custom');
              const fmt = entry('cargo fmt --verbose --all -- --check', fetch_string('fmt_outcome', 'check'), true, 'fmt');
              const check = entry(`cargo check ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('check_outcome', 'check'), true, 'check');
              const clippy = entry(`cargo clippy ${ workspace_args } ${{ inputs.additional_args }} -- -D warnings`, fetch_string('clippy_outcome', 'check'), true, 'clippy');
              const doc = entry('cargo doc --no-deps', fetch_string('doc_outcome', 'check'), ${{ inputs.test_publish_required == 'true' }}, 'doc');
              const licenses = entry('cargo deny check licenses', fetch_string('deny-license_outcome', 'check'), false, 'deny-license');
              const bans = entry('cargo deny check bans', fetch_string('deny-bans_outcome', 'check'), false, 'deny-bans');
              const advisories = entry('cargo deny check advisories', fetch_string('deny-advisories_outcome', 'check'), false, 'deny-advisories');
              const sources = entry('cargo deny check sources', fetch_string('deny-sources_outcome', 'check'), false, 'deny-sources');
              const machete = entry('cargo machete', fetch_string('dependencies_outcome', 'check'), false, 'dependencies');
              const test = entry(`cargo test ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('tests_outcome', 'test'), true, 'tests');
              const miri = entry(`cargo miri test ${ workspace_args } ${{ inputs.additional_args }}`, fetch_string('miri_outcome', 'miri'), false, 'miri');
              const publish = entry(`cargo package`, fetch_string('publish-dryrun_outcome', 'check'), ${{ inputs.test_publish_required == 'true' }}, 'publish-dryrun');

              const path_success = is_success(fetch_string('fmt_outcome', 'check'), fetch_string('check_outcome', 'check'), fetch_string('clippy_outcome', 'check'), fetch_string('tests_outcome', 'test'), (${{ inputs.test_publish_required }} ? fetch_string('publish-dryrun_outcome', 'check') : 'success'), (${{ inputs.test_publish_required }} ? fetch_string('doc_outcome', 'check') : 'success'));

              test_output += `
            <h3>${ fetch_string('name', 'check') } - ${ path_success ? '✅' : '❌' }</h3>
            <table>
            <tr><th>required</th><th>step</th><th>result</th><th>details</th></tr>
            `;
              test_output += custom + fmt + check + clippy + doc + licenses + bans + advisories + sources + machete + test + miri + publish;
              test_output += table_footer;
              success &= path_success;
            }

            const footer = `
            Pushed by: ${{ github.actor }}, Action: ${{ github.event_name }};
            Run: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a>
            `;

            const output = test_output + footer;

            if (context.eventName === 'pull_request' || context.eventName === 'pull_request_target') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

            return success ? "0" : "1";

      - name: Rust Test status
        if: steps.read.outputs.result && ((inputs.custom_cargo_commands != '' && fromJson(steps.read.outputs.result).custom_outcome.check != 'success') || fromJson(steps.read.outputs.result).fmt_outcome.check != 'success' || fromJson(steps.read.outputs.result).check_outcome.check != 'success' || fromJson(steps.read.outputs.result).clippy_outcome.check != 'success' || fromJson(steps.read.outputs.result).tests_outcome.test != 'success' || (inputs.test-publish-required == 'true' && fromJson(steps.read.outputs.result).publish-dryrun_outcome.check != 'success'))
        run: exit ${{ steps.comment.outputs.result }}
