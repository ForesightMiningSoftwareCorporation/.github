name: Publish Release to Private Registry

on:
  workflow_call:
    outputs:
      released:
        description: Was the crate released
        value: ${{ jobs.check_if_needed.outputs.needed }}
    inputs:
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      release_channel:
        type: string
        default: ""
        description: Hard coded release channel
      profile:
        type: string
        default: "release"
        description: Cargo build profile to use
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      custom_cargo_commands:
        type: string
        default: ""
        description: Cusom cargo commands that will be run after login
      version_trigger:
        type: string
        default: 'patch'
        description: "Controls which update trigger a build"

    secrets:
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"

jobs:
  check_if_needed:
     name: Check if a new publish is required
     runs-on: 'ubuntu-latest'
     outputs:
       needed: ${{ steps.is_after.outputs.is_after == 'true' }}
     steps:
       - name: Checkout
         uses: actions/checkout@v3

       - uses: ForesightMiningSoftwareCorporation/github/.github/actions/cargo-version-is-after-prev@binary_release
         name: Check if we should consider this as a new release
         id: is_after
         with:
           working-directory: ${{ inputs.working-directory }}
           registry_git_url: ${{ vars.CARGO_PRIVATE_REGISTRY_HOST }}
           registry_ssh_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
           registry_known_hosts: |
             ${{ vars.CARGO_PRIVATE_REGISTRY_KNOWN_HOSTS }}
           min_update_type: ${{ inputs.version_trigger }}
  matrix:
    name: Build Matrix for binary release
    needs:
      - check_if_needed
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    if: needs.check_if_needed.outputs.needed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create and set Build Matrix from matrix.json
        id: set-matrix
        run: |
          MATRIX=$(jq -c . < .github/workflows/matrix.json | tr -d '^J')
          echo matrix=$MATRIX >> $GITHUB_OUTPUT
  cargo_publish_binary:
    name: Release new version to binary
    needs:
      - check_if_needed
      - matrix
    strategy:
      matrix:
        os: ${{ fromJson(needs.matrix.outputs.matrix).os }}
    runs-on: ${{ matrix.os.name }}
    if: needs.check_if_needed.outputs.needed
    steps:
      - uses: actions/checkout@v3

      - name: Derive Release Channell
        id: extract_branch
        env:
          ACTION_RC: ${{ inputs.release_channel }}
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH_NAME" == "alpha" ] ; then
            RELEASE_CHANNEL=alpha
          elif [ "$BRANCH_NAME" == "beta" ] ; then
            RELEASE_CHANNEL=beta
          elif [ "$BRANCH_NAME" == "prod" ] ; then
            RELEASE_CHANNEL=prod
          fi
          echo release_channel=${ACTION_RC:-${RELEASE_CHANNEL:-nightly}}$RELEASE_CHANNEL >> $GITHUB_OUTPUT
        shell: bash

      - uses: SebRollen/toml-action@v1.0.2
        id: read_version
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.version'

      - uses: SebRollen/toml-action@v1.0.2
        id: read_name
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.name'

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.1.0
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}

      - name: Derive additional script
        shell: bash
        id: additional_script
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          MATRIX_AS=$( cat <<$EOF
          ${{ matrix.os.additional_script }}
          $EOF
          )
          ACTION_AS=$( cat <<$EOF
          ${{ inputs.additional_script }}
          $EOF
          )
          AS=${MATRIX_AS:-$ACTION_AS}
          printf $MATRIX_AS
          printf $ACTION_AS
          printf $AS
          echo "script<<${EOF}" >> $GITHUB_OUTPUT
          printf ${AS} >> $GITHUB_OUTPUT
          echo "${EOF}" >> $GITHUB_OUTPUT
      - name: Additional Linux Script
        if: steps.additional_script.outputs.script != '' && matrix.os.name == 'ubuntu-latest'
        run: ${{ steps.additional_script.outputs.script }}
        shell: bash

      - name: Additional Windows Script
        if: steps.additional_script.outputs.script != '' && matrix.os.name == 'windows-latest'
        run: ${{ steps.additional_script.outputs.script }}
        shell: pwsh

      - name: Update Packages
        if: inputs.required_packages != '' && matrix.bin.name == 'ubuntu-latest'
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Run custom cargo command
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.custom_cargo_commands }}

      - name: Build Binary
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: cargo build --profile ${{ inputs.profile }} --target=${{ matrix.os.arch }} ${{ inputs.additional_args }}

      - name: Copy to bin folder linux
        if: matrix.os.name == 'ubuntu-latest'
        working-directory: ${{ inputs.working-directory }}
        shell: bash
        run: |
          artifacts_dir=${{ runner.temp }}/bin_output/${{ steps.read_name.outputs.value }}/${{ steps.extract_branch.outputs.release_channel }}
          mkdir -p $artifacts_dir
          cp target/${{ matrix.os.arch }}/${{ inputs.profile }}/${{ steps.read_name.outputs.value }} $artifacts_dir/${{  steps.read_name.outputs.value }}-${{ matrix.os.arch }}-${{ inputs.toolchain }}-v${{ steps.read_version.outputs.value }}${{ matrix.os.extension }}

      - name: Copy to bin folder windows
        if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          $Out = New-Item -Path "${{ runner.temp }}\bin_output\${{ steps.read_name.outputs.value }}\${{ steps.extract_branch.outputs.release_channel }}" -ItemType "directory"
          Copy-Item target\${{ matrix.os.arch }}\${{ inputs.profile }}\${{ steps.read_name.outputs.value }}${{ matrix.os.extension }} $Out\${{  steps.read_name.outputs.value }}-${{ matrix.os.arch }}-${{ inputs.toolchain }}-v${{ steps.read_version.outputs.value }}${{ matrix.os.extension }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-binaries
          path: ${{ runner.temp }}/bin_output
  publish_to_bs:
    name: Publish artifact to Block Storage
    runs-on: ubuntu-latest
    needs:
      - cargo_publish_binary
    steps:
      - name: Download artifacts
        id: download_artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-binaries
          path: binaries

      - name: Upload artifacts to blob storage
        if: steps.download_artifacts.outcome == 'success'
        uses: bacongobbler/azure-blob-storage-upload@main
        with:
          container_name: fse-update
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_dir: binaries
