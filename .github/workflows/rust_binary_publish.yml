name: Publish Release as binary

on:
  workflow_dispatch:
    inputs:
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.73"
        description: Rust toolchain to install
      release_channel:
        type: string
        default: ""
        description: Hard coded release channel
      profile:
        type: string
        default: "release"
        description: Cargo build profile to use
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
      custom_cargo_commands:
        type: string
        default: ""
        description: Custom cargo commands that will be run after login
      post_build_additional_script:
        type: string
        default: ""
        description: Post Build Additional script to run after the additional packages
      sign_build:
        type: string
        default: "false"
        description: Should the binary bin be signed
  workflow_call:
    outputs:
      released:
        description: Was the binary published
        value: "true"
    inputs:
      application_name:
        type: string
        description: Name of the application
      targets:
        description: Binaries Targets
        type: string
        default: "[]"
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.73"
        description: Rust toolchain to install
      profile:
        type: string
        default: "release"
        description: Cargo build profile to use
      working_directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      sign_build:
        type: string
        default: "false"
        description: Should the binary bin be signed

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}"

permissions:
  id-token: write
  contents: read

jobs:
  derive_info:
    name: Derive build information from key files
    outputs:
      toolchain: ${{ steps.derive_info.outputs.toolchain }}
      release_channel: ${{ steps.derive_info.outputs.release_channel }}
      features: ${{ steps.derive_info.outputs.features }}
      package: ${{ steps.derive_info.outputs.package }}
      version: ${{ steps.derive_info.outputs.version }}
      launcher_app_name: ${{ steps.derive_info.outputs.launcher_app_name }}
      launcher_app_fallback: ${{ steps.derive_info.outputs.launcher_app_fallback }}
      matrix: ${{ steps.derive_info.outputs.matrix }}
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: derive_info
        name: Derive info
        shell: bash
        env:
          DEFAULT_TOOLCHAIN: ${{ inputs.toolchain }}
        run: |
          PACKAGE=$(yq -p toml '.package.name' < ${{ inputs.working_directory }}/Cargo.toml)
          VERSION=$(yq -p toml '.package.version' < ${{ inputs.working_directory }}/Cargo.toml)
          PACKAGE_REF=$PACKAGE
          VERSION_REF=$VERSION
          if [[ $PACKAGE == *_launcher ]]; then
            PACKAGE_REF=$(yq -p toml '.package.name' < ${{ inputs.working_directory }}/../Cargo.toml)
            VERSION_REF=$(yq -p toml '.package.version' < ${{ inputs.working_directory }}/../Cargo.toml)
          fi
          if [[ $GITHUB_REF == refs/heads/main ]] ; then
            RELEASE_CHANNEL=nightly
            RELEASE_APP_NAME="${{ inputs.application_name }} Nightly"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE_REF-alpha-$VERSION_REF" ]] ; then
            RELEASE_CHANNEL=alpha
            RELEASE_APP_NAME="${{ inputs.application_name }} Alpha"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE_REF-beta-$VERSION_REF" ]] ; then
            RELEASE_CHANNEL=beta
            RELEASE_APP_NAME="${{ inputs.application_name }} Beta"
          elif [[ $GITHUB_REF == "refs/tags/$PACKAGE_REF-prod-$VERSION_REF" ]] ; then
            RELEASE_CHANNEL=prod
            RELEASE_APP_NAME="${{ inputs.application_name }}"
          else
            echo "No matching release channel found for $GITHUB_REF, check that the version in Cargo.toml matches the tag."
            exit 1
          fi
          echo release_channel=${RELEASE_CHANNEL} >> $GITHUB_OUTPUT
          echo toolchain=$(yq -p toml '.toolchain.channel' < rust-toolchain.toml || echo '$DEFAULT_TOOLCHAIN') >> $GITHUB_OUTPUT
          echo package=${PACKAGE} >> $GITHUB_OUTPUT
          echo version=${VERSION} >> $GITHUB_OUTPUT
          echo launcher_app_name=${RELEASE_APP_NAME} >> $GITHUB_OUTPUT
          echo launcher_app_fallback="${RELEASE_APP_NAME// /_}" >> $GITHUB_OUTPUT
          echo matrix='{"x86_64-pc-windows-msvc":{"extension":".exe","runner":"windows-latest-16-cores-custom"},"x86_64-unknown-linux-gnu":{"extennsion":"","runner":"ubuntu-latest-16-cores"}}' >> $GITHUB_OUTPUT

  cargo_build_and_sign_binary:
    name: Release new version as binary
    runs-on: ${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].runner }}
    needs:
      - derive_info
    strategy:
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: ""
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.derive_info.outputs.toolchain }}
      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.FSE_SSH_PRIVATE_KEY }}
            ${{ secrets.BEVY_CLIPMAP_SSH_PRIVATE_KEY }}
            ${{ secrets.DAG_TABLES_SSH_PRIVATE_KEY }}
      - name: Force Static Link on linux
        shell: bash
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          echo RUSTFLAGS="-C target-feature=+crt-static" >> $GITHUB_ENV
      - name: Build Binary
        shell: bash
        working-directory: ${{ inputs.working_directory }}
        run: cargo build --profile ${{ inputs.profile }} --target=${{ matrix.target }} --features ${{needs.derive_info.outputs.release_channel}} ${{ inputs.additional_args }}
        env:
          CARGO_TARGET_DIR: target
          LAUNCHER_APP_NAME: ${{ needs.derive_info.outputs.LAUNCHER_APP_NAME }}
          LAUNCHER_APP_FALLBACK: ${{ needs.derive_info.outputs.LAUNCHER_APP_FALLBACK }}
      - name: Copy to bin artifact folder
        shell: bash
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        working-directory: ${{ inputs.working_directory }}
        run: |
          artifacts_dir=${{ runner.temp }}/bin_output/${{ needs.derive_info.outputs.package }}/${{ needs.derive_info.outputs.release_channel }}
          mkdir -p $artifacts_dir
          cp target/${{ matrix.target }}/${{ inputs.profile }}/${{ needs.derive_info.outputs.package }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }} $artifacts_dir/${{ needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain }}-v${{ needs.derive_info.outputs.version }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }}
          sha512sum $artifacts_dir/${{ needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain }}-v${{ needs.derive_info.outputs.version }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }} | awk '{ print $1 }' >> $artifacts_dir/${{ needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}-sha-512.txt
      - name: Copy to bin folder windows
        if: matrix.target == 'x86_64-pc-windows-msvc'
        shell: pwsh
        working-directory: ${{ inputs.working_directory }}
        run: |
          $Out = New-Item -Path "${{ runner.temp }}\bin_output\${{ needs.derive_info.outputs.package }}\${{ needs.derive_info.outputs.release_channel }}" -ItemType "directory"
          Copy-Item target\${{ matrix.target }}\${{ inputs.profile }}\${{ needs.derive_info.outputs.package }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }} $Out\${{  needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }}
          $hash = Get-FileHash "$Out\${{  needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }}" -Algorithm SHA512
          echo $hash.Hash >> "$Out\${{  needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}-sha512.txt"
      - name: Azure Blob Upload
        uses: LanceMcCarthy/Action-AzureBlobUpload@v3.1.0
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/bin_output
          delete_if_exists: true
      - name: Generate Expiry for SAS Url
        if: inputs.sign_build == 'true'
        shell: bash
        id: sas-expiry
        run: |
          echo "expiry=$(date -u -d "120 minutes" '+%Y-%m-%dT%H:%MZ')" >> $GITHUB_OUTPUT
      - name: Generate SAS Url for binary signing
        if: inputs.sign_build == 'true'
        shell: bash
        id: sas-url
        run: |
          sas=$(az storage blob generate-sas --connection-string "${{ secrets.ARTIFACTS_CONNECTION_STRING }}" --container-name ${{ vars.ARTIFACTS_CONTAINER }} --name ${{ needs.derive_info.outputs.package }}/${{ needs.derive_info.outputs.release_channel }}/${{ needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }} --permissions r --expiry ${{ steps.sas-expiry.outputs.expiry }} --https-only --full-uri --output tsv)
          echo "sas=$sas" >> $GITHUB_OUTPUT
      - name: Retrieve signing secret from Vault
        if: inputs.sign_build == 'true'
        id: import-signing-secrets
        uses: hashicorp/vault-action@v2.7.3
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          path: github
          role: whirlpool-installer
          secrets: |
            kv-v2/data/whirlpool/signer PAT_TOKEN | WHIRLPOOL_SIGNER_PAT_TOKEN ;
            kv-v2/data/whirlpool/signer REPOSITORY | WHIRLPOOL_SIGNER_REPOSITORY ;

      - run: npm install adm-zip
        if: inputs.sign_build == 'true'
      - name: Trigger signer workflow
        uses: ForesightMiningSoftwareCorporation/action-trigger-signer-workflow@main
        id: signer-workflow
        if: inputs.sign_build == 'true'
        with:
          token: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_PAT_TOKEN }}
          signer_repository: ${{ steps.import-signing-secrets.outputs.WHIRLPOOL_SIGNER_REPOSITORY }}
          sas_url: ${{ steps.sas-url.outputs.sas }}
          artifact_to_sign: "${{ needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}-signed${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }}"
          blob_dir: "${{ needs.derive_info.outputs.package }}/${{ needs.derive_info.outputs.release_channel }}"

      - name: Generate signed artifacts checksum windows
        if: inputs.sign_build == 'true'
        shell: pwsh
        run: |
          $hash = Get-FileHash "${{ runner.temp }}\signed_artifacts\${{ needs.derive_info.outputs.package }}\${{ needs.derive_info.outputs.release_channel }}\${{  needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}-signed${{ fromJson(needs.derive_info.outputs.matrix)[matrix.target].extension }}" -Algorithm SHA512
          echo $hash.Hash >> "${{ runner.temp }}\signed_artifacts\${{ needs.derive_info.outputs.package }}\${{ needs.derive_info.outputs.release_channel }}\${{  needs.derive_info.outputs.package }}-${{ matrix.target }}-${{ needs.derive_info.outputs.toolchain}}-v${{ needs.derive_info.outputs.version }}-signed-sha512.txt"
      - name: Upload signed artifacts to Azure Blob Upload
        if: inputs.sign_build == 'true'
        uses: LanceMcCarthy/Action-AzureBlobUpload@v3.1.0
        with:
          container_name: ${{ vars.ARTIFACTS_CONTAINER }}
          connection_string: ${{ secrets.ARTIFACTS_CONNECTION_STRING }}
          source_folder: ${{ runner.temp }}/signed_artifacts
          delete_if_exists: true
      - name: Upload bin to github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-unsigned-${{ matrix.target }}
          path: ${{ runner.temp }}/bin_output
          overwrite: true
      - name: Upload signed bin to github artifacts
        if: inputs.sign_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-signed-${{ matrix.target }}
          path: ${{ runner.temp }}/signed_artifacts
          overwrite: true
