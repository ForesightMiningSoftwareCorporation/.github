name: Publish Release to Private Registry

on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: "ubuntu-latest"
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      initial_event_name:
        type: string
        default: "push"
        description: Event that triggered the workflow
      private-registry-host:
        required: true
        type: string
      private-registry-name:
        required: true
        type: string
      skip-test:
        type: boolean
        default: false
        description: Skip the test step
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
    secrets:
      github-token:
        required: true
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent
      private-registry-private-key:
        required: false
      private-registry-token:
        required: true

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  test:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust-test.yml@v1.0.0
    if: ${{ inputs.skip-test == false }}
    with:
      runner: ${{ inputs.runner }}
      toolchain: ${{ inputs.toolchain }}
      initial_event_name: ${{ inputs.initial_event_name }}
      private-registry-host: ${{ inputs.private-registry-host }}
      private-registry-name: ${{ inputs.private-registry-name }}
    secrets:
      github-token: ${{ secrets.github-token }}
      github-private-keys: ${{ secrets.github-private-keys }}
      private-registry-private-key: ${{ secrets.private-registry-private-key }}
      private-registry-token: ${{ secrets.private-registry-token }}
  set_version:
    needs:
      - test
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    name: Release new version to private registry
    runs-on: "ubuntu-latest"
    steps:
      - name: Git Checkout
        if: ${{ inputs.initial_event_name != 'pull_request_target' }}
        uses: actions/checkout@v3
      - name: Git Checkout
        if: ${{ github.initial_event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          github-token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          components: cargo-index
      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.0.0
        with:
          private_key: ${{ secrets.private-registry-private-key }}
          host: ${{ inputs.private-registry-host }}
          name: ${{ inputs.private-registry-name }}
          token: ${{ secrets.private-registry-token }}
      - name: Read Cargo.toml package version
        id: read_version
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.version'
      - name: Read Cargo.toml package name
        id: read_package_name
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.name'
      - name: Check if version exists
        shell: bash
        id: check_exists
        run: |
          git clone git@${{ inputs.private-registry-host }}:${{ inputs.private-registry-name }}/crate-index.git .crate_index
          if cargo index list --index . --package ${{ steps.read_package_name.outputs.value }} --version ${{ steps.read_version.outputs.value }}; then
            export PACKAGE_EXISTS=yes
          else
            export PACKAGE_EXISTS=no
          fi
          echo "PACKAGE_EXISTS=$PACKAGE_EXISTS" >> $GITHUB_OUTPUT
      - name: Cache Dependencies
        if: ${{ steps.check_exists.outputs.PACKAGE_EXISTS == 'no' }}
        uses: Swatinem/rust-cache@v2
      - name: Publish to private registry
        if: ${{ steps.check_exists.outputs.PACKAGE_EXISTS == 'no' }}
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: cargo publish --registry ${{ inputs.private-registry-name }}
