name: Publish Release to Private Registry

on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: "ubuntu-latest"
      required_packages:
        type: string
        default: ""
        description: Package that needs to be installed before Rust compilation can happens
      additional_args:
        type: string
        default: ""
        description: Additional arguments to pass to the cargo command
      toolchain:
        type: string
        default: "1.65"
        description: Rust toolchain to install
      initial_event_name:
        type: string
        default: "push"
        description: Event that triggered the workflow
      private-registry-host:
        type: string
        default: ""
      private-registry-git-http-url:
        type: string
        default: ""
      private-registry-name:
        type: string
        default: ""
      public-registry:
        type: string
        default: "false"
      skip-test:
        type: boolean
        default: false
        description: Skip the test step
      working-directory:
        type: string
        default: "."
        description: Working directory to run the cargo command
      additional_script:
        type: string
        default: ""
        description: Additional script to run before the additional packages
    secrets:
      github-token:
        required: true
      github-private-keys:
        required: false
        description: Private keys that need to be added to the ssh-agent
      private-registry-private-key:
        required: false
      private-registry-git-username:
        required: false
      private-registry-git-password:
        required: false
      private-registry-token:
        required: false
      public-registry-token:
        required: false
      discord-webhook:
        required: false
        description: Discord webhook to send a message to
      approval_app_id:
        required: false
        description: ID of the approval app
      approval_app_private_key:
        required: false
        description: Private key of the approval app

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_HTTP_USER_AGENT: "shipyard ${{ secrets.private-registry-token }}"

permissions:
  issues: write
  contents: read

jobs:
  test:
    uses: ForesightMiningSoftwareCorporation/github/.github/workflows/rust-test.yml@v1.0.0
    if: ${{ inputs.skip-test == false }}
    with:
      runner: ${{ inputs.runner }}
      toolchain: ${{ inputs.toolchain }}
      initial_event_name: ${{ inputs.initial_event_name }}
      private-registry-host: ${{ inputs.private-registry-host }}
      private-registry-name: ${{ inputs.private-registry-name }}
      additional_script: ${{ inputs.additional_script }}
      required_packages: ${{ inputs.required_packages }}
      public-registry: ${{ inputs.public-registry }}
      working-directory: ${{ inputs.working-directory }}
      additional_args: ${{ inputs.additional_args }}
    secrets:
      github-token: ${{ secrets.github-token }}
      github-private-keys: ${{ secrets.github-private-keys }}
      private-registry-private-key: ${{ secrets.private-registry-private-key }}
      private-registry-token: ${{ secrets.private-registry-token }}
  set_version:
    needs:
      - test
    if: |
      always() &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    name: Release new version to private registry
    runs-on: "ubuntu-latest"
    steps:
      - name: Git Checkout
        if: ${{ inputs.initial_event_name != 'pull_request_target' }}
        uses: actions/checkout@v3
      - name: Git Checkout
        if: ${{ github.initial_event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          github-token: ${{ secrets.github-token }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/cargo-crate-exists@develop
        name: Check if the package exists
        id: check_exists
        with:
          working-directory: inputs.working-directory
          cargo_private_registry_git_http_url: inputs.private-registry-git-http-url
          cargo_private_registry_git_http_username: secrets.private-registry-git-username
          cargo_private_registry_git_http_password: secrets.private-registry-git-password

      - name: Login to public Registry
        shell: bash
        if: steps.check_exists.outputs.exists == 'false' && inputs.public-registry == 'true'
        run: |
          cargo login ${{ secrets.public-registry-token }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.0.0
        if: steps.check_exists.outputs.exists == 'false' && inputs.public-registry != 'true'
        with:
          private_key: ${{ secrets.private-registry-private-key }}
          host: ${{ inputs.private-registry-host }}
          name: ${{ inputs.private-registry-name }}
          token: ${{ secrets.private-registry-token }}

      - name: Generate token
        id: generate_token
        if: steps.check_exists.outputs.exists == 'false' && inputs.public-registry == 'true'
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.approval_app_id }}
          private_key: ${{ secrets.approval_app_private_key }}

      - name: Approve Release
        uses: trstringer/manual-approval@v1
        if: steps.check_exists.outputs.exists == 'false' && inputs.public-registry == 'true'
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: "Publishers"
          minimum-approvals: 1
          issue-title: "Publish new version to *public* registry of ${{ steps.read_package_name.outputs.value }}: ${{ steps.read_version.outputs.value }}"

      - name: Additional Script
        if: steps.check_exists.outputs.exists == 'false' && inputs.additional_script != ''
        run: ${{ inputs.additional_script }}
        shell: bash

      - name: Update Packages
        if: steps.check_exists.outputs.exists == 'false' && inputs.required_packages != ''
        run: sudo apt-get update -yq && sudo apt-get install -yq --no-install-recommends ${{ inputs.required_packages }}

      - name: Publish to private registry
        if: steps.check_exists.outputs.exists == 'false' && inputs.public-registry != 'true'
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: cargo publish --registry ${{ inputs.private-registry-name }}

      - name: Publish to public registry
        if: steps.check_exists.outputs.exists == 'false' &&  inputs.public-registry == 'true'
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: cargo publish

      - name: Send Discord Notification
        if: steps.check_exists.outputs.exists == 'false'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.discord-webhook }}
          DISCORD_EMBEDS: '[{"title": "Documentation", "url": "https://shipyard.rs/${{ inputs.private-registry-name }}/${{ steps.read_package_name.outputs.value }}/${{ steps.read_version.outputs.value }}/docs/${{ steps.read_package_name.outputs.value }}/index.html"}]'
        with:
          args: "Version ${{ steps.read_version.outputs.value }} of ${{ steps.read_package_name.outputs.value }} has been published to the private registry"
