on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Binary to build"
        default: "."
      revision:
        type: string
        default: ""
        description: Revision to pull
      dockerfile:
        type: string
        description: "The path to the Dockerfile to use"
        default: Dockerfile
      image:
        type: string
        required: true
        description: "Docker image name"

jobs:
  docker_publish:
    runs-on: ubuntu-latest
    env:
      PRIVATE_REGISTRY_TOKEN: ${{ secrets.private-registry-token }}
    steps:
      - name: Classic git Checkout
        if: ${{ inputs.initial_event_name != 'pull_request_target' }}
        uses: actions/checkout@v3

      - name: Git Checkout for Pull Request Target
        if: ${{ inputs.initial_event_name == 'pull_request_target' }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ inputs.revision }}

      # Login to registry (ACR)
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: oreprohub.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - uses: SebRollen/toml-action@v1.1.0
        id: read_version
        with:
          file: '${{ inputs.working-directory }}/Cargo.toml'
          field: 'package.version'

      - name: Check Docker version exists
        id: check_version_exists
        uses: foresightminingsoftwarecorporation/docker-check-exists@v1
        with:
          repository: oreprohub.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          image_name: ${{ inputs.image }}
          version: ${{ steps.read_version.outputs.value }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@v1.1.0
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        with:
          private_key: ${{ secrets.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ secrets.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ secrets.CARGO_PRIVATE_REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        uses: docker/setup-buildx-action@v1

      - name: Build & Push
        uses: docker/build-push-action@v2
        if: ${{ fromJSON(steps.check_version_exists.outputs.exists) == false }}
        with:
          context: ${{ inputs.working-directory }}
          push: true
          file: "${{ inputs.working-directory }}/${{ inputs.dockerfile }}"
          secret-files: |
            shipyard_token=./shipyard_token
          tags: |
            ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.read_version.outputs.value }}
            ${{ inputs.registry }}/${{ inputs.image }}:latest