on:
  workflow_call:
    outputs:
      released:
        description: Was the crate released
        value: "true"
    inputs:
      working_directory:
        type: string
        description: "Binary to build"
        default: "."
      toolchain:
        type: string
        description: "Rust toolchain to use"
        default: "stable"
      docker_context:
        type: string
        description: "Path to docker context"
        default: "default-docker-context-replace-me"
      dockerfile:
        type: string
        description: "The path to the Dockerfile to use"
        default: Dockerfile
      image:
        type: string
        required: true
        description: "Docker image name"
      registry:
        type: string
        default: "oreprohub.azurecr.io"
        description: "Docker registry"
      self_hosted_runner:
        type: string
        default: "true"
        description: Run on sel-hosted-runner
      vault_auth_role:
        type: string
        default: ""
        description: Vault role to use to retrieve secrets

jobs:
  docker_publish:
    runs-on: ${{ inputs.self_hosted_runner == 'true' && 'rust-1-77-scale-set' || 'ubuntu-latest' }}
    steps:
      - name: Connect to VPN
        if: ${{ inputs.self_hosted_runner != 'true' }}
        uses: ForesightMiningSoftwareCorporation/github/.github/actions/vpn_setup@lp-orica-digital
        with:
          vault_auth_role: ${{ inputs.vault_auth_role }}

      - name: Checkout
        uses: actions/checkout@v4

      - uses: SebRollen/toml-action@v1.0.2
        id: read_version
        with:
          file: "${{ inputs.working_directory }}/Cargo.toml"
          field: "package.version"

      - name: Retrieve Docker Credentials from FSLABS Vault
        id: secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          method: jwt
          url: https://vault.foresightmining.com:8200
          path: github
          role: ${{ inputs.vault_auth_role }}
          secrets: |
            kv-v2/data/docker/acr/oreprohub username | DOCKER_OREPROHUB_AZURECR_IO_USERNAME;
            kv-v2/data/docker/acr/oreprohub password | DOCKER_OREPROHUB_AZURECR_IO_PASSWORD;
            kv-v2/data/docker/acr/oricacrplatformfslabs001 username | DOCKER_ORICACRPLATFORMFSLABS001_AZURECR_IO_USERNAME;
            kv-v2/data/docker/acr/oricacrplatformfslabs001 password | DOCKER_ORICACRPLATFORMFSLABS001_AZURECR_IO_PASSWORD;
            kv-v2/data/shipyard host | CARGO_PRIVATE_REGISTRY_HOST;
            kv-v2/data/shipyard name | CARGO_PRIVATE_REGISTRY_NAME;
            kv-v2/data/shipyard token | CARGO_PRIVATE_REGISTRY_TOKEN;
            kv-v2/data/shipyard ssh_private_key | CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY;
            kv-v2/data/github/ssh-keys/${{ inputs.vault_auth_role }} PRIVATE_SSH_KEYS | PRIVATE_SSH_KEYS;
      #
      # Login to registry (ACR)
      - name: Login to oreprohub
        uses: docker/login-action@v3
        if: ${{ inputs.registry == 'oreprohub.azurecr.io' }}
        with:
          registry: ${{ inputs.registry }}
          username: ${{ steps.secrets.outputs.DOCKER_OREPROHUB_AZURECR_IO_USERNAME }}
          password: ${{ steps.secrets.outputs.DOCKER_OREPROHUB_AZURECR_IO_PASSWORD }}
          logout: false

      - name: Login to oricacrplatformfslabs001
        uses: docker/login-action@v3
        with:
          registry: oricacrplatformfslabs001.azurecr.io
          username: ${{ steps.secrets.outputs.DOCKER_ORICACRPLATFORMFSLABS001_AZURECR_IO_USERNAME }}
          password: ${{ steps.secrets.outputs.DOCKER_ORICACRPLATFORMFSLABS001_AZURECR_IO_PASSWORD }}
          logout: false

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}

      - uses: ForesightMiningSoftwareCorporation/github/.github/actions/login-private-registry@lp-orica-digital
        with:
          private_key: ${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_SSH_PRIVATE_KEY }}
          host: ${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_HOST }}
          name: ${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_NAME }}
          token: ${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_TOKEN }}
          additional_private_keys: |
            ${{ secrets.OREPROLIB_SSH_PRIVATE_KEY }}
            ${{ secrets.SPARKL_BLAST_SSH_PRIVATE_KEY }}
            ${{ steps.secrets.outputs.PRIVATE_SSH_KEYS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.docker_context == 'default-docker-context-replace-me' && inputs.working_directory || inputs.docker_context }}
          push: true
          file: "${{ inputs.working_directory }}/${{ inputs.dockerfile }}"
          ssh: default=${{ env.SSH_AUTH_SOCK }}
          secrets: |
            node_auth_token="${{ secrets.GITHUB_TOKEN }}"
            cargo_http_user_agent="shipyard ${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_TOKEN  }}"
            cargo_private_registry_token="${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_TOKEN  }}"
            cargo_private_registry_name="${{ steps.secrets.outputs.CARGO_PRIVATE_REGISTRY_NAME  }}"
          tags: |
            ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.read_version.outputs.value }}
            ${{ inputs.registry }}/${{ inputs.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
