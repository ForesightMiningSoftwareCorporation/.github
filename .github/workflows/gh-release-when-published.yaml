on:
  workflow_call:
    inputs:
      private_registry_release:
        type: string
        default: "false"
        description: "Was the crate released on the private registry"
      public_registry_release:
        type: string
        default: "false"
        description: "Was the crate released on the public registry"
      docker_release:
        type: string
        default: "false"
        description: "Was the crate released on docker"
      binary_release:
        type: string
        default: "false"
        description: "Was the crate released as binary"
      npm_napi_release:
        type: string
        default: "false"
        description: "Was the crate released as a napi binding"
      installer_release:
        type: string
        default: "false"
        description: "Was the crate released as installer"
      working-directory:
        type: string
        default: "."
        description: "The working directory"

env:
  DISCORD_WEBHOOK: "${{ secrets.DISCORD_WEBHOOK }}"

jobs:
  create-github-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.working-directory }}/Cargo.toml

      - id: derive_info
        name: Derive info
        shell: bash
        run: |
          echo package=$(yq -p toml '.package.name' < ${{ inputs.working-directory }}/Cargo.toml) >> $GITHUB_OUTPUT
          echo version=$(yq -p toml '.package.version' < ${{ inputs.working-directory }}/Cargo.toml) >> $GITHUB_OUTPUT

      - id: generate_token
        name: Generate token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.FMSC_BOT_GITHUB_APP_ID }}
          private_key: ${{ secrets.FMSC_BOT_GITHUB_APP_PRIVATE_KEY }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: "${{ steps.generate_token.outputs.token }}"
          custom_tag: "${{ steps.derive_info.outputs.version }}"
          tag_prefix: "${{ steps.derive_info.outputs.package }}-"

      - name: Generate Private Registry url
        id: private_registry_url
        if: inputs.private_registry_release == 'true'
        shell: bash
        run: |
          url="https://shipyard.rs/${{ secrets.CARGO_PRIVATE_REGISTRY_NAME }}/crates/${{ steps.derive_info.outputs.package }}/${{ steps.derive_info.outputs.version }}"
          echo "value=$url" >> $GITHUB_OUTPUT

      - name: Generate Public Registry url
        id: public_registry_url
        if: inputs.public_registry_release == 'true'
        shell: bash
        run: |
          url="https://crates.io/crates/${{ steps.derive_info.outputs.package }}/${{ steps.derive_info.outputs.version }}"
          echo "value=$url" >> $GITHUB_OUTPUT

      - name: Generate Docker URL
        id: docker_registry_url
        if: inputs.docker_release == 'true'
        shell: bash
        run: |
          url="oreprohub.azurecr.io/${{ steps.derive_info.outputs.package }}:${{ steps.derive_info.outputs.version }}"
          echo "value=$url" >> $GITHUB_OUTPUT

      - name: Download artifacts
        id: download_artifacts
        if: inputs.binary_release == 'true'
        uses: actions/download-artifact@v4
        with:
          pattern: release-binaries-*
          path: binaries
          merge-multiple: true

      - name: Generate NPM URL
        id: npm_napi_url
        if: inputs.npm_napi_release == 'true'
        shell: bash
        run: |
          url=https://github.com/${{ github.repository_owner }}/${{ github.repository }}/pkgs/npm/${{ steps.derive_info.outputs.package }}
          echo "value=$url" >> $GITHUB_OUTPUT

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        id: release
        with:
          token: ${{ steps.generate_token.outputs.token }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.derive_info.outputs.package }} - ${{ steps.derive_info.outputs.version }}
          artifacts: "binaries/${{ steps.derive_info.outputs.package }}/**/*"
          skipIfReleaseExists: true
          body: |
            ## Releases
            * Private Registry: ${{ steps.private_registry_url.outputs.value || 'NA' }}
            * Public Registry: ${{ steps.pubic_registry_url.outputs.value || 'NA' }}
            * Docker: ${{ steps.docker_registry_url.outputs.value || 'NA' }}
            * Binary: ${{ inputs.binary_release == 'true' && 'See artifacts' || 'NA' }}
            * NPM Napi: ${{ steps.npm_napi_url.outputs.value || 'NA' }}
            ## Changelog
            ${{ steps.tag_version.outputs.changelog }}

      - name: Send Discord Notification
        if: (success() || failure()) && env.DISCORD_WEBHOOK != ''
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: '[{"title": "Release", "url": "${{steps.release.outputs.html_url}}"}]'
        with:
          args: "Version ${{ steps.derive_info.outputs.version }} of ${{ steps.derive_info.outputs.package }} has been released"
